msgid ""
msgstr ""
"Project-Id-Version: ndiscordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-20 09:34+0800\n"
"PO-Revision-Date: 2021-09-20 02:49\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: ndiscordpy\n"
"X-Crowdin-Project-ID: 476871\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /docs/_build/locale/faq.pot\n"
"X-Crowdin-File-ID: 57\n"
"Language: id_ID\n"

#: ../../faq.rst:7
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:9
msgid "This is a list of Frequently Asked Questions regarding using ``discord.py`` and its extension modules. Feel free to suggest a new question or submit one via pull requests."
msgstr ""

#: ../../faq.rst:13
msgid "Questions"
msgstr ""

#: ../../faq.rst:16
msgid "Coroutines"
msgstr ""

#: ../../faq.rst:18
msgid "Questions regarding coroutines and asyncio belong here."
msgstr ""

#: ../../faq.rst:21
msgid "What is a coroutine?"
msgstr ""

#: ../../faq.rst:23
msgid "A |coroutine_link|_ is a function that must be invoked with ``await`` or ``yield from``. When Python encounters an ``await`` it stops the function's execution at that point and works on other things until it comes back to that point and finishes off its work. This allows for your program to be doing multiple things at the same time without using threads or complicated multiprocessing."
msgstr ""

#: ../../faq.rst:28
msgid "**If you forget to await a coroutine then the coroutine will not run. Never forget to await a coroutine.**"
msgstr ""

#: ../../faq.rst:31
msgid "Where can I use ``await``\\?"
msgstr ""

#: ../../faq.rst:33
msgid "You can only use ``await`` inside ``async def`` functions and nowhere else."
msgstr ""

#: ../../faq.rst:36
msgid "What does \"blocking\" mean?"
msgstr ""

#: ../../faq.rst:38
msgid "In asynchronous programming a blocking call is essentially all the parts of the function that are not ``await``. Do not despair however, because not all forms of blocking are bad! Using blocking calls is inevitable, but you must work to make sure that you don't excessively block functions. Remember, if you block for too long then your bot will freeze since it has not stopped the function's execution at that point to do other things."
msgstr ""

#: ../../faq.rst:43
msgid "If logging is enabled, this library will attempt to warn you that blocking is occurring with the message: ``Heartbeat blocked for more than N seconds.`` See :ref:`logging_setup` for details on enabling logging."
msgstr ""

#: ../../faq.rst:47
msgid "A common source of blocking for too long is something like :func:`time.sleep`. Don't do that. Use :func:`asyncio.sleep` instead. Similar to this example: ::"
msgstr ""

#: ../../faq.rst:56
msgid "Another common source of blocking for too long is using HTTP requests with the famous module :doc:`req:index`. While :doc:`req:index` is an amazing module for non-asynchronous programming, it is not a good choice for :mod:`asyncio` because certain requests can block the event loop too long. Instead, use the :doc:`aiohttp <aio:index>` library which is installed on the side with this library."
msgstr ""

#: ../../faq.rst:61
msgid "Consider the following example: ::"
msgstr ""

#: ../../faq.rst:77
msgid "General"
msgstr ""

#: ../../faq.rst:79
msgid "General questions regarding library usage belong here."
msgstr ""

#: ../../faq.rst:82
msgid "Where can I find usage examples?"
msgstr ""

#: ../../faq.rst:84
msgid "Example code can be found in the `examples folder <https://github.com/Rapptz/discord.py/tree/master/examples>`_ in the repository."
msgstr ""

#: ../../faq.rst:88
msgid "How do I set the \"Playing\" status?"
msgstr ""

#: ../../faq.rst:90
msgid "The ``activity`` keyword argument may be passed in the :class:`Client` constructor or :meth:`Client.change_presence`, given an :class:`Activity` object."
msgstr ""

#: ../../faq.rst:92
msgid "The constructor may be used for static activities, while :meth:`Client.change_presence` may be used to update the activity at runtime."
msgstr ""

#: ../../faq.rst:96
msgid "It is highly discouraged to use :meth:`Client.change_presence` or API calls in :func:`on_ready` as this event may be called many times while running, not just once."
msgstr ""

#: ../../faq.rst:98
msgid "There is a high chance of disconnecting if presences are changed right after connecting."
msgstr ""

#: ../../faq.rst:100
msgid "The status type (playing, listening, streaming, watching) can be set using the :class:`ActivityType` enum. For memory optimisation purposes, some activities are offered in slimmed-down versions:"
msgstr ""

#: ../../faq.rst:103
msgid ":class:`Game`"
msgstr ""

#: ../../faq.rst:104
msgid ":class:`Streaming`"
msgstr ""

#: ../../faq.rst:106
msgid "Putting both of these pieces of info together, you get the following: ::"
msgstr ""

#: ../../faq.rst:115
msgid "How do I send a message to a specific channel?"
msgstr ""

#: ../../faq.rst:117
msgid "You must fetch the channel directly and then call the appropriate method. Example: ::"
msgstr ""

#: ../../faq.rst:123
msgid "How do I send a DM?"
msgstr ""

#: ../../faq.rst:125
msgid "Get the :class:`User` or :class:`Member` object and call :meth:`abc.Messageable.send`. For example: ::"
msgstr ""

#: ../../faq.rst:130
msgid "If you are responding to an event, such as :func:`on_message`, you already have the :class:`User` object via :attr:`Message.author`: ::"
msgstr ""

#: ../../faq.rst:135
msgid "How do I get the ID of a sent message?"
msgstr ""

#: ../../faq.rst:137
msgid ":meth:`abc.Messageable.send` returns the :class:`Message` that was sent. The ID of a message can be accessed via :attr:`Message.id`: ::"
msgstr ""

#: ../../faq.rst:144
msgid "How do I upload an image?"
msgstr ""

#: ../../faq.rst:146
msgid "To upload something to Discord you have to use the :class:`File` object."
msgstr ""

#: ../../faq.rst:148
msgid "A :class:`File` accepts two parameters, the file-like object (or file path) and the filename to pass to Discord when uploading."
msgstr ""

#: ../../faq.rst:151
msgid "If you want to upload an image it's as simple as: ::"
msgstr ""

#: ../../faq.rst:155
msgid "If you have a file-like object you can do as follows: ::"
msgstr ""

#: ../../faq.rst:160
msgid "To upload multiple files, you can use the ``files`` keyword argument instead of ``file``\\: ::"
msgstr ""

#: ../../faq.rst:168
msgid "If you want to upload something from a URL, you will have to use an HTTP request using :doc:`aiohttp <aio:index>` and then pass an :class:`io.BytesIO` instance to :class:`File` like so:"
msgstr ""

#: ../../faq.rst:185
msgid "How can I add a reaction to a message?"
msgstr ""

#: ../../faq.rst:187
msgid "You use the :meth:`Message.add_reaction` method."
msgstr ""

#: ../../faq.rst:189
msgid "If you want to use unicode emoji, you must pass a valid unicode code point in a string. In your code, you can write this in a few different ways:"
msgstr ""

#: ../../faq.rst:191
msgid "``'üëç'``"
msgstr ""

#: ../../faq.rst:192
msgid "``'\\U0001F44D'``"
msgstr ""

#: ../../faq.rst:193
msgid "``'\\N{THUMBS UP SIGN}'``"
msgstr ""

#: ../../faq.rst:195
#: ../../faq.rst:211
#: ../../faq.rst:286
#: ../../faq.rst:302
#: ../../faq.rst:322
msgid "Quick example: ::"
msgstr ""

#: ../../faq.rst:201
msgid "In case you want to use emoji that come from a message, you already get their code points in the content without needing to do anything special. You **cannot** send ``':thumbsup:'`` style shorthands."
msgstr ""

#: ../../faq.rst:204
msgid "For custom emoji, you should pass an instance of :class:`Emoji`. You can also pass a ``'<:name:id>'`` string, but if you can use said emoji, you should be able to use :meth:`Client.get_emoji` to get an emoji via ID or use :func:`utils.find`/ :func:`utils.get` on :attr:`Client.emojis` or :attr:`Guild.emojis` collections."
msgstr ""

#: ../../faq.rst:208
msgid "The name and ID of a custom emoji can be found with the client by prefixing ``:custom_emoji:`` with a backslash. For example, sending the message ``\\:python3:`` with the client will result in ``<:python3:232720527448342530>``."
msgstr ""

#: ../../faq.rst:228
msgid "How do I pass a coroutine to the player's \"after\" function?"
msgstr ""

#: ../../faq.rst:230
msgid "The library's music player launches on a separate thread, ergo it does not execute inside a coroutine. This does not mean that it is not possible to call a coroutine in the ``after`` parameter. To do so you must pass a callable that wraps up a couple of aspects."
msgstr ""

#: ../../faq.rst:234
msgid "The first gotcha that you must be aware of is that calling a coroutine is not a thread-safe operation. Since we are technically in another thread, we must take caution in calling thread-safe operations so things do not bug out. Luckily for us, :mod:`asyncio` comes with a :func:`asyncio.run_coroutine_threadsafe` function that allows us to call a coroutine from another thread."
msgstr ""

#: ../../faq.rst:239
msgid "However, this function returns a :class:`~concurrent.futures.Future` and to actually call it we have to fetch its result. Putting all of this together we can do the following: ::"
msgstr ""

#: ../../faq.rst:254
msgid "How do I run something in the background?"
msgstr ""

#: ../../faq.rst:256
msgid "`Check the background_task.py example. <https://github.com/Rapptz/discord.py/blob/master/examples/background_task.py>`_"
msgstr ""

#: ../../faq.rst:259
msgid "How do I get a specific model?"
msgstr ""

#: ../../faq.rst:261
msgid "There are multiple ways of doing this. If you have a specific model's ID then you can use one of the following functions:"
msgstr ""

#: ../../faq.rst:264
msgid ":meth:`Client.get_channel`"
msgstr ""

#: ../../faq.rst:265
msgid ":meth:`Client.get_guild`"
msgstr ""

#: ../../faq.rst:266
msgid ":meth:`Client.get_user`"
msgstr ""

#: ../../faq.rst:267
msgid ":meth:`Client.get_emoji`"
msgstr ""

#: ../../faq.rst:268
msgid ":meth:`Guild.get_member`"
msgstr ""

#: ../../faq.rst:269
msgid ":meth:`Guild.get_channel`"
msgstr ""

#: ../../faq.rst:270
msgid ":meth:`Guild.get_role`"
msgstr ""

#: ../../faq.rst:272
msgid "The following use an HTTP request:"
msgstr ""

#: ../../faq.rst:274
msgid ":meth:`abc.Messageable.fetch_message`"
msgstr ""

#: ../../faq.rst:275
msgid ":meth:`Client.fetch_user`"
msgstr ""

#: ../../faq.rst:276
msgid ":meth:`Client.fetch_guilds`"
msgstr ""

#: ../../faq.rst:277
msgid ":meth:`Client.fetch_guild`"
msgstr ""

#: ../../faq.rst:278
msgid ":meth:`Guild.fetch_emoji`"
msgstr ""

#: ../../faq.rst:279
msgid ":meth:`Guild.fetch_emojis`"
msgstr ""

#: ../../faq.rst:280
msgid ":meth:`Guild.fetch_member`"
msgstr ""

#: ../../faq.rst:283
msgid "If the functions above do not help you, then use of :func:`utils.find` or :func:`utils.get` would serve some use in finding specific models."
msgstr ""

#: ../../faq.rst:297
msgid "How do I make a web request?"
msgstr ""

#: ../../faq.rst:299
msgid "To make a request, you should use a non-blocking library. This library already uses and requires a 3rd party library for making requests, :doc:`aiohttp <aio:index>`."
msgstr ""

#: ../../faq.rst:309
msgid "See `aiohttp's full documentation <http://aiohttp.readthedocs.io/en/stable/>`_ for more information."
msgstr ""

#: ../../faq.rst:312
msgid "How do I use a local image file for an embed image?"
msgstr ""

#: ../../faq.rst:314
msgid "Discord special-cases uploading an image attachment and using it within an embed so that it will not display separately, but instead in the embed's thumbnail, image, footer or author icon."
msgstr ""

#: ../../faq.rst:317
msgid "To do so, upload the image normally with :meth:`abc.Messageable.send`, and set the embed's image URL to ``attachment://image.png``, where ``image.png`` is the filename of the image you will send."
msgstr ""

#: ../../faq.rst:331
msgid "Due to a Discord limitation, filenames may not include underscores."
msgstr ""

#: ../../faq.rst:334
msgid "Is there an event for audit log entries being created?"
msgstr ""

#: ../../faq.rst:336
msgid "Since Discord does not dispatch this information in the gateway, the library cannot provide this information. This is currently a Discord limitation."
msgstr ""

#: ../../faq.rst:340
msgid "Commands Extension"
msgstr ""

#: ../../faq.rst:342
msgid "Questions regarding ``discord.ext.commands`` belong here."
msgstr ""

#: ../../faq.rst:345
msgid "Why does ``on_message`` make my commands stop working?"
msgstr ""

#: ../../faq.rst:347
msgid "Overriding the default provided ``on_message`` forbids any extra commands from running. To fix this, add a ``bot.process_commands(message)`` line at the end of your ``on_message``. For example: ::"
msgstr ""

#: ../../faq.rst:356
msgid "Alternatively, you can place your ``on_message`` logic into a **listener**. In this setup, you should not manually call ``bot.process_commands()``. This also allows you to do multiple things asynchronously in response to a message. Example::"
msgstr ""

#: ../../faq.rst:366
msgid "Why do my arguments require quotes?"
msgstr ""

#: ../../faq.rst:368
msgid "In a simple command defined as: ::"
msgstr ""

#: ../../faq.rst:374
msgid "Calling it via ``?echo a b c`` will only fetch the first argument and disregard the rest. To fix this you should either call it via ``?echo \"a b c\"`` or change the signature to have \"consume rest\" behaviour. Example: ::"
msgstr ""

#: ../../faq.rst:381
msgid "This will allow you to use ``?echo a b c`` without needing the quotes."
msgstr ""

#: ../../faq.rst:384
msgid "How do I get the original ``message``\\?"
msgstr ""

#: ../../faq.rst:386
msgid "The :class:`~ext.commands.Context` contains an attribute, :attr:`~.Context.message` to get the original message."
msgstr ""

#: ../../faq.rst:389
#: ../../faq.rst:401
msgid "Example: ::"
msgstr ""

#: ../../faq.rst:396
msgid "How do I make a subcommand?"
msgstr ""

#: ../../faq.rst:398
msgid "Use the :func:`~ext.commands.group` decorator. This will transform the callback into a :class:`~ext.commands.Group` which will allow you to add commands into the group operating as \"subcommands\". These groups can be arbitrarily nested as well."
msgstr ""

#: ../../faq.rst:412
msgid "This could then be used as ``?git push origin master``."
msgstr ""

