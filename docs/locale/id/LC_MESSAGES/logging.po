msgid ""
msgstr ""
"Project-Id-Version: ndiscordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-20 09:34+0800\n"
"PO-Revision-Date: 2021-09-20 02:49\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: ndiscordpy\n"
"X-Crowdin-Project-ID: 476871\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /docs/_build/locale/logging.pot\n"
"X-Crowdin-File-ID: 33\n"
"Language: id_ID\n"

#: ../../logging.rst:7
msgid "Setting Up Logging"
msgstr ""

#: ../../logging.rst:9
msgid "*discord.py* logs errors and debug information via the :mod:`logging` python module. It is strongly recommended that the logging module is configured, as no errors or warnings will be output if it is not set up. Configuration of the ``logging`` module can be as simple as::"
msgstr ""

#: ../../logging.rst:18
msgid "Placed at the start of the application. This will output the logs from discord as well as other libraries that use the ``logging`` module directly to the console."
msgstr ""

#: ../../logging.rst:22
msgid "The optional ``level`` argument specifies what level of events to log out and can be any of ``CRITICAL``, ``ERROR``, ``WARNING``, ``INFO``, and ``DEBUG`` and if not specified defaults to ``WARNING``."
msgstr ""

#: ../../logging.rst:26
msgid "More advanced setups are possible with the :mod:`logging` module. For example to write the logs to a file called ``discord.log`` instead of outputting them to the console the following snippet can be used::"
msgstr ""

#: ../../logging.rst:39
msgid "This is recommended, especially at verbose levels such as ``INFO`` and ``DEBUG``, as there are a lot of events logged and it would clog the stdout of your program."
msgstr ""

#: ../../logging.rst:45
msgid "For more information, check the documentation and tutorial of the :mod:`logging` module."
msgstr ""

