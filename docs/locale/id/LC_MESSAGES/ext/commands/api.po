msgid ""
msgstr ""
"Project-Id-Version: ndiscordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-20 11:18+0800\n"
"PO-Revision-Date: 2021-09-20 09:40\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: ndiscordpy\n"
"X-Crowdin-Project-ID: 476871\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /docs/_build/locale/ext/commands/api.pot\n"
"X-Crowdin-File-ID: 43\n"
"Language: id_ID\n"

#: ../../ext/commands/api.rst:4
msgid "API Reference"
msgstr ""

#: ../../ext/commands/api.rst:6
msgid "The following section outlines the API of ndiscord.py's command extension module."
msgstr ""

#: ../../ext/commands/api.rst:11
msgid "Bots"
msgstr ""

#: ../../ext/commands/api.rst:14
msgid "Bot"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:1
msgid "Represents a discord bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:3
msgid "This class is a subclass of :class:`discord.Client` and as a result anything that you can do with a :class:`discord.Client` you can do with this bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:7
msgid "This class also subclasses :class:`.GroupMixin` to provide the functionality to manage commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:12
msgid "The command prefix is what the message content must contain initially to have a command invoked. This prefix could either be a string to indicate what the prefix should be, or a callable that takes in the bot as its first parameter and :class:`discord.Message` as its second parameter and returns the prefix. This is to facilitate \"dynamic\" command prefixes. This callable can be either a regular function or a coroutine."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:20
msgid "An empty string as the prefix always matches, enabling prefix-less command invocation. While this may be useful in DMs it should be avoided in servers, as it's likely to cause performance issues and unintended command invocations."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:25
msgid "The command prefix could also be an iterable of strings indicating that multiple checks for the prefix should be used and the first one to match will be the invocation prefix. You can get this prefix via :attr:`.Context.prefix`. To avoid confusion empty iterables are not allowed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:33
msgid "When passing multiple prefixes be careful to not pass a prefix that matches a longer prefix occurring later in the sequence.  For example, if the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be matched to any message as the previous one matches messages starting with ``!?``. This is especially important when passing an empty string, it should always be last as no prefix after it will be matched."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:43
msgid "Whether the commands should be case insensitive. Defaults to ``False``. This attribute does not carry over to groups. You must set it to every group if you require group commands to be case insensitive as well."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.activity:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.allowed_mentions:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_flags:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_id:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cached_messages:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cogs:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.commands:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.emojis:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.extensions:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.guilds:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.intents:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.latency:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.persistent_views:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.private_channels:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.stickers:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.users:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.voice_clients:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.full_parent_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.parents:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.root_parent:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.qualified_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.cog_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.short_doc:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.signature:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.cog_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.commands:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.full_parent_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.parents:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.qualified_name:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.root_parent:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.short_doc:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.signature:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.GroupMixin.commands:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.qualified_name:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.description:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.Paginator.pages:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.valid:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.clean_prefix:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.cog:0
#: ../../docstring of discord.ext.commands.Context.guild:0
#: ../../docstring of discord.ext.commands.Context.channel:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.voice_client:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.Flag.required:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UnexpectedQuoteError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.InvalidEndOfQuotedStringError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExpectedClosingQuoteError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandInvokeError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MessageNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MemberNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotReadable:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ThreadNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadColourArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.RoleNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.EmojiNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PartialEmojiConversionFailure:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildStickerNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadBoolArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingPermissions:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingPermissions:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRole:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingRole:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingAnyRole:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingAnyRole:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadFlagArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingFlagArgument:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredFlag:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:0
msgid "type"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:47
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:91
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:17
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:49
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:86
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:97
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:112
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:121
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:129
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:16
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:18
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:25
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:16
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:15
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:24
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:18
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:9
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:97
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.valid:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:16
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:22
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:30
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:48
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.Flag.required:5
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:18
msgid ":class:`bool`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:51
msgid "The content prefixed into the default help message."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:53
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:79
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.full_parent_name:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.qualified_name:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.short_doc:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.signature:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.full_parent_name:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.qualified_name:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.short_doc:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.signature:3
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.qualified_name:3
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.description:3
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:37
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:45
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:10
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:13
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:20
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:49
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:56
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:16
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:23
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:48
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:9
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:13
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:19
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:34
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.clean_prefix:5
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:11
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:23
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UnexpectedQuoteError:9
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.InvalidEndOfQuotedStringError:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExpectedClosingQuoteError:9
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MessageNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MemberNotFound:12
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserNotFound:12
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ThreadNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadColourArgument:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.RoleNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.EmojiNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PartialEmojiConversionFailure:12
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildStickerNotFound:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadBoolArgument:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionError:9
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:9
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:12
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:12
msgid ":class:`str`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:57
msgid "The help command implementation to use. This can be dynamically set at runtime. To remove the help command pass ``None``. For more information on implementing a help command, see :ref:`ext_commands_help_command`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:61
msgid "Optional[:class:`.HelpCommand`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:65
msgid "The user ID that owns the bot. If this is not set and is then queried via :meth:`.is_owner` then it is fetched automatically using :meth:`~.Bot.application_info`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:69
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_id:9
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:36
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:41
msgid "Optional[:class:`int`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:73
msgid "The user IDs that owns the bot. This is similar to :attr:`owner_id`. If this is not set and the application is team based, then it is fetched automatically using :meth:`~.Bot.application_info`. For performance reasons it is recommended to use a :class:`set` for the collection. You cannot set both ``owner_id`` and ``owner_ids``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:81
msgid "Optional[Collection[:class:`int`]]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.Bot:85
msgid "Whether to strip whitespace characters after encountering the command prefix. This allows for ``!   hello`` and ``!hello`` to both work if the ``command_prefix`` is set to ``!``. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.after_invoke:1
msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:3
msgid "A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:7
msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:11
msgid "Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless checks and argument parsing procedures succeed. This hook is, however, **always** called regardless of the internal command callback raising an error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-up scenarios."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.add_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_check:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_listener:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.invoke:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_interaction:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.register_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.remove_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_check:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_listener:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:0
#: ../../ext/commands/api.rst:0
#: ../../ext/commands/api.rst:0
#: ../../ext/commands/api.rst:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_before_invoke:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_after_invoke:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.add_check:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_check:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_command_formatting:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_command_formatting:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:0
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:0
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NSFWChannelRequired:0
msgid "Parameters"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:17
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:11
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:11
msgid "The coroutine to register as the post-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:0
#: ../../../discord/client.py:docstring of discord.client.Client.event:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.start:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:0
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:0
msgid "Raises"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.after_invoke:20
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:19
#: ../../../discord/client.py:docstring of discord.client.Client.event:15
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:10
msgid "The coroutine passed is not actually a coroutine."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.before_invoke:1
msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:3
msgid "A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:7
msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:11
msgid "The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are only called if all checks and argument parsing procedures pass without error. If any check or argument parsing procedures fail then the hooks are not called."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.before_invoke:16
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:11
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:11
msgid "The coroutine to register as the pre-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check:1
msgid "A decorator that adds a global check to the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check:3
msgid "A global check is similar to a :func:`.check` that is applied on a per command basis except it is run before any command checks have been verified and applies to every command the bot has."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check:9
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:19
msgid "This function can either be a regular function or a coroutine."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check:11
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:21
msgid "Similar to a command :func:`.check`\\, this takes a single parameter of type :class:`.Context` and can only raise exceptions inherited from :exc:`.CommandError`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check:16
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:26
#: ../../../discord/client.py:docstring of discord.client.Client.event:8
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:8
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_listener:9
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:6
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned_or:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:16
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:20
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.before_invoke:9
msgid "Example"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:1
msgid "A decorator that adds a \"call once\" global check to the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:3
msgid "Unlike regular global checks, this one is called only once per :meth:`.invoke` call."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:6
msgid "Regular global checks are called whenever a command is called or :meth:`.Command.can_run` is called. This type of check bypasses that and ensures that it's called only once, even inside the default help command."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.check_once:13
msgid "When using this function the :class:`.Context` sent to a group subcommand may only parse the parent command and not the subcommands due to it being invoked once per :meth:`.Bot.invoke` call."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:1
msgid "A shortcut decorator that invokes :func:`.command` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.application_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.copy:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group.copy:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_applications:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_listeners:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.copy:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:0
msgid "Returns"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:4
msgid "A decorator that converts the provided method into a Command, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.application_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:0
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.copy:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group.copy:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_applications:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_listeners:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:0
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:0
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.copy:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:0
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:0
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:0
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:0
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:0
msgid "Return type"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.command:5
msgid "Callable[..., :class:`Command`]"
msgstr ""

#: ../../../discord/client.py:docstring of discord.client.Client.event:1
msgid "A decorator that registers an event to listen to."
msgstr ""

#: ../../../discord/client.py:docstring of discord.client.Client.event:3
msgid "You can find more info about the events on the :ref:`documentation below <discord-api-events>`."
msgstr ""

#: ../../../discord/client.py:docstring of discord.client.Client.event:5
msgid "The events must be a :ref:`coroutine <coroutine>`, if not, :exc:`TypeError` is raised."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:1
msgid "A shortcut decorator that invokes :func:`.group` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:4
msgid "A decorator that converts the provided method into a Group, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.group:5
msgid "Callable[..., :class:`Group`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:1
msgid "A decorator that registers another function as an external event listener. Basically this allows you to listen to multiple events from different places e.g. such as :func:`.on_ready`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:5
msgid "The functions being listened to must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:21
msgid "Would print one and two in an unspecified order."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.listen:23
msgid "The function being listened to is not a coroutine."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.application_command:1
msgid "A shortcut decorator that invokes :func:`~discord.ext.app.command` and adds it to the internal command list via :meth:`~.ApplicationCommandMixin.add_application`."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.application_command:6
msgid "A decorator that converts the provided method into an :class:`.ApplicationCommand`, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.application_command:8
msgid "Callable[..., :class:`ApplicationCommand`]"
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:1
msgid "A shortcut decorator that invokes :func:`~discord.ext.app.command` and adds it to the internal command list via :meth:`~.ApplicationCommandMixin.add_application`. This shortcut is made specifically for :class:`.SlashCommand`."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:7
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:7
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:7
msgid "The name of the command. Defaults to the name of the method."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:9
msgid "A short description of the command."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:11
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:9
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:9
msgid "Guild IDs where the command can be run on. Setting this will make the command only usable from this guild."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:14
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:12
#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:12
msgid "A list of predicates that must be true for the command to be invoked."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:17
msgid "A decorator that converts the provided method into a :class:`.SlashCommand`, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.slash_command:19
msgid "Callable[..., :class:`.SlashCommand`]"
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:1
msgid "A shortcut decorator that invokes :func:`~discord.ext.app.command` and adds it to the internal command list via :meth:`~.ApplicationCommandMixin.add_application`. This shortcut is made specifically for :class:`.UserCommand`."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:15
msgid "A decorator that converts the provided method into a :class:`.UserCommand`, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.user_command:17
msgid "Callable[..., :class:`.UserCommand`]"
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:1
msgid "A shortcut decorator that invokes :func:`~discord.ext.app.command` and adds it to the internal command list via :meth:`~.ApplicationCommandMixin.add_application`. This shortcut is made specifically for :class:`.MessageCommand`."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:15
msgid "A decorator that converts the provided method into a :class:`.MessageCommand`, adds it to the bot, then returns it."
msgstr ""

#: ../../../discord/ext/app/mixins.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.message_command:17
msgid "Callable[..., :class:`.MessageCommand`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.activity:1
msgid "The activity being used upon logging in."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.activity:4
msgid "Optional[:class:`.BaseActivity`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.add_application:1
msgid "Register a new application command."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.add_application:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.register_application:4
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.remove_application:3
msgid "The command to register."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_check:1
msgid "Adds a global check to the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_check:3
msgid "This is the non-decorator interface to :meth:`.check` and :meth:`.check_once`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_check:6
msgid "The function that was used as a global check."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_check:7
msgid "If the function should only be called once per :meth:`.invoke` call."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:1
msgid "Adds a \"cog\" to the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:3
msgid "A cog is a class that has its own event listeners and commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:7
msgid ":exc:`.ClientException` is raised when a cog with the same name is already loaded."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:10
msgid "The cog to register to the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:12
msgid "If a previously loaded cog with the same name should be ejected instead of raising an error.  .. versionadded:: 2.0"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:12
msgid "If a previously loaded cog with the same name should be ejected instead of raising an error."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:18
msgid "The cog does not inherit from :class:`.Cog`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:19
msgid "An error happened during loading."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_cog:20
msgid "A cog with the same name is already loaded."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:1
msgid "Adds a :class:`.Command` into the internal list of commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:3
msgid "This is usually not called, instead the :meth:`~.GroupMixin.command` or :meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:6
msgid "Raise :exc:`.CommandRegistrationError` instead of generic :exc:`.ClientException`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:9
msgid "The command to add."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:12
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:12
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:12
msgid "If the command or its alias is already registered by different command."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.add_command:13
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:13
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.add_command:13
msgid "If the command passed is not a subclass of :class:`.Command`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_listener:1
msgid "The non decorator alternative to :meth:`.listen`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_listener:3
msgid "The function to call."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.add_listener:5
msgid "The name of the event to listen for. Defaults to ``func.__name__``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:1
msgid "Registers a :class:`~discord.ui.View` for persistent listening."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:3
msgid "This method should be used for when a view is comprised of components that last longer than the lifecycle of the program."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:8
msgid "The view to register for dispatching."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:10
msgid "The message ID that the view is attached to. This is currently used to refresh the view's state during message update events. If not given then message update events are not propagated for the view."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:15
msgid "A view was not passed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.add_view:16
msgid "The view is not persistent. A persistent view has no timeout     and all their components have an explicitly provided custom_id."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.allowed_mentions:1
msgid "The allowed mention configuration."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.allowed_mentions:5
msgid "Optional[:class:`~discord.AllowedMentions`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_flags:1
msgid "The client's application flags."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_flags:5
msgid ":class:`~discord.ApplicationFlags`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_id:1
msgid "The client's application ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.application_id:3
msgid "If this is not passed via ``__init__`` then this is retrieved through the gateway when an event contains the data. Usually after :func:`~discord.on_connect` is called."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.close:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.invoke:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_application_error:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.on_command_error:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_connect:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_error:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_interaction:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.register_application_commands:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.start:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_until_ready:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.__call__:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:1
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:1
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:1
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:1
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:1
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:1
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:1
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:1
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.trigger_typing:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:1
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:1
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:1
msgid "|coro|"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:3
msgid "Retrieves the bot's application information."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:5
msgid "Retrieving the information failed somehow."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:7
msgid "The bot's application information."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.application_info:8
msgid ":class:`.AppInfo`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:3
msgid "A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:7
msgid "The default implementation sleeps for 5 seconds."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:11
msgid "The shard ID that requested being IDENTIFY'd"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.before_identify_hook:13
msgid "Whether this IDENTIFY is the first initial IDENTIFY."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cached_messages:1
msgid "Read-only list of messages the connected client has cached."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cached_messages:5
msgid "Sequence[:class:`.Message`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:3
msgid "Changes the client's presence."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:12
msgid "Removed the ``afk`` keyword-only parameter."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:15
msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:17
msgid "Indicates what status to change to. If ``None``, then :attr:`.Status.online` is used."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.change_presence:21
msgid "If the ``activity`` parameter is not the proper type."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.clear:1
msgid "Clears the internal state of the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.clear:3
msgid "After this, the bot can be considered \"re-opened\", i.e. :meth:`is_closed` and :meth:`is_ready` both return ``False`` along with the bot's internal cache cleared."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.close:3
msgid "Closes the connection to Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cogs:1
msgid "A read-only mapping of cog name to cog."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.cogs:3
msgid "Mapping[:class:`str`, :class:`Cog`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.commands:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.commands:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.GroupMixin.commands:1
msgid "A unique set of commands without aliases that are registered."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.commands:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.commands:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.GroupMixin.commands:3
msgid "Set[:class:`.Command`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:3
msgid "Creates a websocket connection and lets the websocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:8
msgid "If we should attempt reconnecting, either due to internet failure or a specific failure on Discord's part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens)."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:14
msgid "If the gateway to connect to Discord is not found. Usually if this     is thrown then there is a Discord API outage."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.connect:15
msgid "The websocket connection has been terminated."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:3
msgid "Creates a :class:`.DMChannel` with this user."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:5
msgid "This should be rarely called, as this is done transparently for most people."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:10
msgid "The user to create a DM with."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:13
msgid "The channel that was created."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_dm:14
msgid ":class:`.DMChannel`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:3
msgid "Creates a :class:`.Guild`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:5
msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:7
msgid "The name of the guild."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:9
msgid "The region for the voice communication server. Defaults to :attr:`.VoiceRegion.us_west`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:12
msgid "The :term:`py:bytes-like object` representing the icon. See :meth:`.ClientUser.edit` for more details on what is expected."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:15
msgid "The code for a template to create the guild with.  .. versionadded:: 1.4"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:15
msgid "The code for a template to create the guild with."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:20
msgid "Guild creation failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:21
msgid "Invalid icon image format given. Must be PNG or JPG."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:23
msgid "The guild created. This is not the same guild that is added to cache."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.create_guild:25
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:21
msgid ":class:`.Guild`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:3
msgid "Revokes an :class:`.Invite`, URL, or ID to an invite."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:5
msgid "You must have the :attr:`~.Permissions.manage_channels` permission in the associated guild to do this."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:8
msgid "The invite to revoke."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:11
msgid "You do not have permissions to revoke invites."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:12
msgid "The invite is invalid or expired."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.delete_invite:13
msgid "Revoking the invite failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.emojis:1
msgid "The emojis that the connected client has."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.emojis:3
msgid "List[:class:`.Emoji`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.extensions:1
msgid "A read-only mapping of extension name to extension."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.extensions:3
msgid "Mapping[:class:`str`, :class:`py:types.ModuleType`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:3
msgid "Retrieves a :class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, or :class:`.Thread` with the specified ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:7
msgid "This method is an API call. For general usage, consider :meth:`get_channel` instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:11
msgid "An unknown channel type was received from Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:12
msgid "Retrieving the channel failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:13
msgid "Invalid Channel ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:14
msgid "You do not have permission to fetch this channel."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:16
msgid "The channel from the ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_channel:17
msgid "Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, :class:`.Thread`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:3
msgid "Get all registered global commands on Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:9
msgid "This method is an API call. For general usage use :meth:`get_applications`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:11
msgid "Retrieving the global application commands failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:13
msgid "The collection of global command that registred on Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_global_applications:14
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:17
msgid "List[Union[:class:`.ApplicationCommand`, :class:`.RawApplicationCommand`]]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:3
msgid "Retrieves a :class:`.Guild` from an ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:7
msgid "Using this, you will **not** receive :attr:`.Guild.channels`, :attr:`.Guild.members`, :attr:`.Member.activity` and :attr:`.Member.voice` per :class:`.Member`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:12
msgid "This method is an API call. For general usage, consider :meth:`get_guild` instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:14
msgid "The guild's ID to fetch from."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:17
msgid "You do not have access to the guild."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:18
msgid "Getting the guild failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild:20
msgid "The guild from the ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:3
msgid "Get all registered guild commands on Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:9
msgid "This method is an API call. For general usage use :meth:`get_guild_applications`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:11
msgid "The guild ID to be fetched."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:14
msgid "Retrieving the guild application commands failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guild_applications:16
msgid "The collection of guild command that registred on Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:1
msgid "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:5
msgid "Using this, you will only receive :attr:`.Guild.owner`, :attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per :class:`.Guild`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:10
msgid "This method is an API call. For general usage, consider :attr:`guilds` instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:13
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:22
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:37
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:20
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:6
msgid "Examples"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:14
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:7
msgid "Usage ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:19
msgid "Flattening into a list ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:24
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:19
msgid "All parameters are optional."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:26
msgid "The number of guilds to retrieve. If ``None``, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to ``100``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:31
msgid "Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:35
msgid "Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:40
msgid "Getting the guilds failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_channels:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_members:0
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:0
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_commands:0
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_applications:0
#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:0
msgid "Yields"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_guilds:42
msgid ":class:`.Guild` -- The guild with the guild data parsed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:3
msgid "Gets an :class:`.Invite` from a discord.gg URL or ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:7
msgid "If the invite is for a guild you have not joined, the guild and channel attributes of the returned :class:`.Invite` will be :class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` respectively."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:11
msgid "The Discord invite ID or URL (must be a discord.gg URL)."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:13
msgid "Whether to include count information in the invite. This fills the :attr:`.Invite.approximate_member_count` and :attr:`.Invite.approximate_presence_count` fields."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:17
msgid "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field.  .. versionadded:: 2.0"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:17
msgid "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:23
msgid "The invite has expired or is invalid."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:24
msgid "Getting the invite failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:26
msgid "The invite from the URL/ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_invite:27
msgid ":class:`.Invite`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:3
msgid "Retrieves all available premium sticker packs."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:7
msgid "Retrieving the sticker packs failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:9
msgid "All available premium sticker packs."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_premium_sticker_packs:10
msgid "List[:class:`.StickerPack`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:3
msgid "Gets a :class:`.StageInstance` for a stage channel id."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:7
msgid "The stage channel ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:10
msgid "The stage instance or channel could not be found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:11
msgid "Getting the stage instance failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:13
msgid "The stage instance from the stage channel ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_stage_instance:14
msgid ":class:`.StageInstance`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:3
msgid "Retrieves a :class:`.Sticker` with the specified ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:7
msgid "Retrieving the sticker failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:8
msgid "Invalid sticker ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:10
msgid "The sticker you requested."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_sticker:11
msgid "Union[:class:`.StandardSticker`, :class:`.GuildSticker`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:3
msgid "Gets a :class:`.Template` from a discord.new URL or code."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:5
msgid "The Discord Template Code or URL (must be a discord.new URL)."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:8
msgid "The template is invalid."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:9
msgid "Getting the template failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:11
msgid "The template from the URL/code."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_template:12
msgid ":class:`.Template`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:3
msgid "Retrieves a :class:`~discord.User` based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:9
msgid "This method is an API call. If you have :attr:`discord.Intents.members` and member cache enabled, consider :meth:`get_user` instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:12
msgid "The user's ID to fetch from."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:15
msgid "A user with this ID does not exist."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:16
msgid "Fetching the user failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:18
msgid "The user you requested."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_user:19
msgid ":class:`~discord.User`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:3
msgid "Retrieves a :class:`.Webhook` with the specified ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:5
msgid "Retrieving the webhook failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:6
msgid "Invalid webhook ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:7
msgid "You do not have permission to fetch this webhook."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:9
msgid "The webhook you requested."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_webhook:10
msgid ":class:`.Webhook`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:3
msgid "Gets a :class:`.Widget` from a guild ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:7
msgid "The guild must have the widget enabled to get this information."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:9
msgid "The ID of the guild."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:12
msgid "The widget for this guild is disabled."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:13
msgid "Retrieving the widget failed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:15
msgid "The guild's widget."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.fetch_widget:16
msgid ":class:`.Widget`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_channels:1
msgid "A generator that retrieves every :class:`.abc.GuildChannel` the client can 'access'."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_channels:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_members:3
msgid "This is equivalent to: ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_channels:11
msgid "Just because you receive a :class:`.abc.GuildChannel` does not mean that you can communicate in said channel. :meth:`.abc.GuildChannel.permissions_for` should be used for that."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_channels:15
msgid ":class:`.abc.GuildChannel` -- A channel the client can 'access'."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_members:1
msgid "Returns a generator with every :class:`.Member` the client can see."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_all_members:9
msgid ":class:`.Member` -- A member the client can see."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:1
msgid "Get an application by its ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:5
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:7
msgid "The application ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:8
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:10
msgid "The application command or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_application:9
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:11
msgid "Optional[:class:`.ApplicationCommand`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:3
msgid "Returns the invocation context from the interaction. This is a more low-level counter-part for :meth:`.process_application_commands` to allow users more fine grained control over the processing."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:7
msgid "The interaction to get the invocation context from."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:9
msgid "The factory class that will be used to create the context. By default, this is :class:`.ApplicationContext`. Should a custom class be provided, it must be similar enough to :class:`.ApplicationContext`\\'s interface."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:14
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:20
msgid "The invocation context. The type of this can change via the ``cls`` parameter."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.get_application_context:16
msgid ":class:`.ApplicationContext`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_applications:1
msgid "A list of application that are registered."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_applications:5
msgid "List of registered global applications."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_applications:6
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:9
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_applications:3
msgid "List[:class:`.ApplicationCommand`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:1
msgid "Returns a channel or thread with the given ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:5
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:3
msgid "The ID to search for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:6
msgid "The returned channel or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_channel:7
msgid "Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, :class:`.abc.PrivateChannel`]]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:1
msgid "Gets the cog instance requested."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:3
msgid "If the cog is not found, ``None`` is returned instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:5
msgid "The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:10
msgid "The cog that was requested. If not found, returns ``None``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_cog:11
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:62
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:10
msgid "Optional[:class:`Cog`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:1
msgid "Get a :class:`.Command` from the internal list of commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:4
msgid "This could also be used as a way to get aliases."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:6
msgid "The name could be fully qualified (e.g. ``'foo bar'``) will get the subcommand ``bar`` of the group command ``foo``. If a subcommand is not found then ``None`` is returned just as usual."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:10
msgid "The name of the command to get."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:13
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:13
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:13
msgid "The command that was requested. If not found, returns ``None``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.get_command:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:103
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:14
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.get_command:14
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:56
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:81
msgid "Optional[:class:`Command`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:3
msgid "Returns the invocation context from the message."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:5
msgid "This is a more low-level counter-part for :meth:`.process_commands` to allow users more fine grained control over the processing."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:8
msgid "The returned context is not guaranteed to be a valid invocation context, :attr:`.Context.valid` must be checked to make sure it is. If the context is not valid then it is not a valid candidate to be invoked under :meth:`~.Bot.invoke`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:13
msgid "The message to get the invocation context from."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:15
msgid "The factory class that will be used to create the context. By default, this is :class:`.Context`. Should a custom class be provided, it must be similar enough to :class:`.Context`\\'s interface."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_context:22
msgid ":class:`.Context`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:1
msgid "Returns an emoji with the given ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:6
msgid "The custom emoji or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_emoji:7
msgid "Optional[:class:`.Emoji`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:1
msgid "Returns a guild with the given ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:6
msgid "The guild or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild:7
#: ../../docstring of discord.ext.commands.Context.guild:4
msgid "Optional[:class:`.Guild`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:1
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:1
msgid "A list of application that are registered for a guild."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_application:5
#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:5
msgid "The guild ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_guild_applications:8
msgid "List of registered applications for a guild."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:1
msgid "Returns a partial messageable with the given channel ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:3
msgid "This is useful if you have a channel_id but don't want to do an API call to send messages to it."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:8
msgid "The channel ID to create a partial messageable for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:10
msgid "The underlying channel type for the partial messageable."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:13
msgid "The partial messageable"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_partial_messageable:14
msgid ":class:`.PartialMessageable`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:3
msgid "Retrieves the prefix the bot is listening to with the message as a context."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:6
msgid "The message context to get the prefix of."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:9
msgid "A list of prefixes or a single prefix that the bot is listening for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.get_prefix:11
msgid "Union[List[:class:`str`], :class:`str`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:1
msgid "Returns a stage instance with the given stage channel ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:8
msgid "The returns stage instance of ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_stage_instance:9
msgid "Optional[:class:`.StageInstance`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:1
msgid "Returns a guild sticker with the given ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:7
msgid "To retrieve standard stickers, use :meth:`.fetch_sticker`. or :meth:`.fetch_premium_sticker_packs`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:10
msgid "The sticker or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_sticker:11
msgid "Optional[:class:`.GuildSticker`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:1
msgid "Returns a user with the given ID."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:6
msgid "The user or ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.get_user:7
msgid "Optional[:class:`~discord.User`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.guilds:1
msgid "The guilds that the connected client is a member of."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.guilds:3
msgid "List[:class:`.Guild`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.intents:1
msgid "The intents configured for this connection."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.intents:5
msgid ":class:`~discord.Intents`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.invoke:3
msgid "Invokes the command given under the invocation context and handles all the internal event dispatch mechanisms."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.invoke:6
msgid "The invocation context to invoke."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.is_closed:1
msgid ":class:`bool`: Indicates if the websocket connection is closed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:3
msgid "Checks if a :class:`~discord.User` or :class:`~discord.Member` is the owner of this bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:6
msgid "If an :attr:`owner_id` is not set, it is fetched automatically through the use of :meth:`~.Bot.application_info`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:9
msgid "The function also checks if the application is team-owned if :attr:`owner_ids` is not set."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:13
msgid "The user to check for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.is_owner:16
msgid "Whether the user is the owner."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.is_ready:1
msgid ":class:`bool`: Specifies if the client's internal cache is ready for use."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.is_ws_ratelimited:1
msgid ":class:`bool`: Whether the websocket is currently rate limited."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.is_ws_ratelimited:3
msgid "This can be useful to know when deciding whether you should query members using HTTP or via the gateway."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.latency:1
msgid "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.latency:3
msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.latency:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:10
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:13
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:8
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:22
msgid ":class:`float`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:1
msgid "Loads an extension."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:3
msgid "An extension is a python module that contains commands, cogs, or listeners."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:6
msgid "An extension must have a global function, ``setup`` defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the ``bot``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:10
msgid "The extension name to load. It must be dot separated like regular Python imports if accessing a sub-module. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:14
msgid "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:14
msgid "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:21
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:20
msgid "The extension could not be imported.     This is also raised if the name of the extension could not     be resolved using the provided ``package`` parameter."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:22
msgid "The extension is already loaded."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:23
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:21
msgid "The extension does not have a setup function."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.load_extension:24
msgid "The extension or its setup function had an execution error."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:3
msgid "Logs in the client with the specified credentials."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:6
msgid "The authentication token. Do not prefix this token with anything as the library will do it for you."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:10
msgid "The wrong credentials are passed."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.login:11
msgid "An unknown HTTP related error occurred,     usually when it isn't 200 or the known incorrect credentials     passing status code."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_application_error:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.on_command_error:3
msgid "The default command error handler provided by the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_application_error:5
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.on_command_error:5
msgid "By default this prints to :data:`sys.stderr` however it could be overridden to have a different implementation."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_application_error:8
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.on_command_error:8
msgid "This only fires if you do not specify any listeners for command error."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_connect:3
msgid "Initialize application registration. If you decide to override this, you need to make sure that you call :meth:`.register_application_commands` at some point to make sure application commands works."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_connect:7
msgid "Or you can do ``super().on_connect()`` too."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_error:3
msgid "The default error handler provided by the client."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.on_error:5
msgid "By default this prints to :data:`sys.stderr` however it could be overridden to have a different implementation. Check :func:`~discord.on_error` for more details."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_interaction:3
msgid "This event handle should handle all interaction coming from Discord. This would pass the information into :meth:`.process_application_commands`"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_interaction:6
msgid "If you're overriding this, please dont forget to call the :meth:`.process_application_commands` or the application wont work."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.on_interaction:9
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:17
msgid "The interaction to process"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.persistent_views:1
msgid "A sequence of persistent views added to the client."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.persistent_views:5
msgid "Sequence[:class:`.View`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.private_channels:1
msgid "The private channels that the connected client is participating on."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.private_channels:5
msgid "This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.private_channels:8
msgid "List[:class:`.abc.PrivateChannel`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:3
msgid "This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:7
msgid "By default, this coroutine is called inside the :func:`.on_interaction` event. If you choose to override the :func:`.on_interaction` event, then you should invoke this coroutine as well."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.process_application_commands:11
msgid "This function finds a registered command matching the interaction id from :meth:`ApplicationCommandMixin.application_command` and runs :meth:`ApplicationCommand.invoke` on it. If no matching command was found, it replies to the interaction with a default message."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:7
msgid "By default, this coroutine is called inside the :func:`.on_message` event. If you choose to override the :func:`.on_message` event, then you should invoke this coroutine as well."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:11
msgid "This is built using other low level tools, and is equivalent to a call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:14
msgid "This also checks if the message's author is a bot and doesn't call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.process_commands:17
msgid "The message to process commands for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.register_application:1
msgid "Register the command to the factories and remove from pending section. Please make sure the app already been registered to Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.register_application_commands:3
msgid "Method to start registering and unregistering commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:1
msgid "Atomically reloads an extension."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:3
msgid "This replaces the extension with the same extension, only refreshed. This is equivalent to a :meth:`unload_extension` followed by a :meth:`load_extension` except done in an atomic way. That is, if an operation fails mid-reload then the bot will roll-back to the prior working state."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:8
msgid "The extension name to reload. It must be dot separated like regular Python imports if accessing a sub-module. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:12
msgid "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:12
msgid "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:19
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:23
msgid "The extension was not loaded."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.reload_extension:22
msgid "The extension setup function had an execution error."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.app.mixins.ApplicationCommandMixin.remove_application:1
msgid "Remove command from the list of registered commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_check:1
msgid "Removes a global check from the bot."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_check:3
msgid "This function is idempotent and will not raise an exception if the function is not in the global checks."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_check:6
msgid "The function to remove from the global checks."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_check:7
msgid "If the function was added with ``call_once=True`` in the :meth:`.Bot.add_check` call or using :meth:`.check_once`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:1
msgid "Removes a cog from the bot and returns it."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:3
msgid "All registered commands and event listeners that the cog has registered will be removed as well."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:6
msgid "If no cog is found then this method has no effect."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:8
msgid "The name of the cog to remove."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:11
msgid "The cog that was removed. ``None`` if not found."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_cog:12
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.cog:4
msgid "Optional[:class:`.Cog`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:1
msgid "Remove a :class:`.Command` from the internal list of commands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:4
msgid "This could also be used as a way to remove aliases."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:6
msgid "The name of the command to remove."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:9
msgid "The command that was removed. If the name is not valid then ``None`` is returned instead."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:11
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:11
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.remove_command:11
msgid "Optional[:class:`.Command`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_listener:1
msgid "Removes a listener from the pool of listeners."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_listener:3
msgid "The function that was used as a listener to remove."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.remove_listener:4
msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.run:1
msgid "A blocking call that abstracts away the event loop initialisation from you."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.run:4
msgid "If you want more control over the event loop then this function should not be used. Use :meth:`start` coroutine or :meth:`connect` + :meth:`login`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.run:8
msgid "Roughly Equivalent to: ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.run:20
msgid "This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.start:3
msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.start:5
msgid "An unexpected keyword argument was received."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.status:1
msgid ":class:`.Status`: The status being used upon logging on to Discord."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.stickers:1
msgid "The stickers that the connected client has."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.stickers:5
msgid "List[:class:`.GuildSticker`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:1
msgid "Unloads an extension."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:3
msgid "When the extension is unloaded, all commands, listeners, and cogs are removed from the bot and the module is un-imported."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:6
msgid "The extension can provide an optional global function, ``teardown``, to do miscellaneous clean-up if necessary. This function takes a single parameter, the ``bot``, similar to ``setup`` from :meth:`~.Bot.load_extension`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:11
msgid "The extension name to unload. It must be dot separated like regular Python imports if accessing a sub-module. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:15
msgid "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:15
msgid "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.BotBase.unload_extension:22
msgid "The name of the extension could not     be resolved using the provided ``package`` parameter."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.user:1
msgid "Represents the connected client. ``None`` if not logged in."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.user:3
msgid "Optional[:class:`.ClientUser`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.users:1
msgid "Returns a list of all the users the bot can see."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.users:3
msgid "List[:class:`~discord.User`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.voice_clients:1
msgid "Represents a list of voice connections."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.voice_clients:3
msgid "These are usually :class:`.VoiceClient` instances."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.Bot.voice_clients:5
msgid "List[:class:`.VoiceProtocol`]"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:3
msgid "Waits for a WebSocket event to be dispatched."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:5
msgid "This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:9
msgid "The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By default, it does not timeout. Note that this does propagate the :exc:`asyncio.TimeoutError` for you in case of timeout and is provided for ease of use."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:14
msgid "In case the event returns multiple arguments, a :class:`tuple` containing those arguments is returned instead. Please check the :ref:`documentation <discord-api-events>` for a list of events and their parameters."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:19
msgid "This function returns the **first event that meets the requirements**."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:23
msgid "Waiting for a user reply: ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:37
msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:55
msgid "The event name, similar to the :ref:`event reference <discord-api-events>`, but without the ``on_`` prefix, to wait for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:58
msgid "A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:61
msgid "The number of seconds to wait before timing out and raising :exc:`asyncio.TimeoutError`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:65
msgid "If a timeout is provided and it was reached."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_for:67
msgid "Returns no arguments, a single argument, or a :class:`tuple` of multiple arguments that mirrors the parameters passed in the :ref:`event reference <discord-api-events>`."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.client.Client.wait_until_ready:3
msgid "Waits until the client's internal cache is all ready."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:1
msgid "An iterator that recursively walks through all commands and subcommands."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:3
msgid "Duplicates due to aliases are no longer returned"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin.walk_commands:6
msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the internal list of commands."
msgstr ""

#: ../../ext/commands/api.rst:60
msgid "AutoShardedBot"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.AutoShardedBot:1
msgid "This is similar to :class:`.Bot` except that it is inherited from :class:`discord.AutoShardedClient` instead."
msgstr ""

#: ../../ext/commands/api.rst:68
msgid "Prefix Helpers"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned:1
msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned:3
#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned_or:3
msgid "These are meant to be passed into the :attr:`.Bot.command_prefix` attribute."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned_or:1
msgid "A callable that implements when mentioned or other prefixes provided."
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned_or:13
msgid "This callable returns another callable, so if this is done inside a custom callable, you must call the returned callable, for example:"
msgstr ""

#: ../../../discord/ext/commands/bot.py:docstring of discord.ext.commands.bot.when_mentioned_or:23
msgid ":func:`.when_mentioned`"
msgstr ""

#: ../../ext/commands/api.rst:77
msgid "Event Reference"
msgstr ""

#: ../../ext/commands/api.rst:79
msgid "These events function similar to :ref:`the regular events <discord-api-events>`, except they are custom to the command extension module."
msgstr ""

#: ../../ext/commands/api.rst:84
msgid "An error handler that is called when an error is raised inside a command either through user input error, check failure, or an error in your own code."
msgstr ""

#: ../../ext/commands/api.rst:88
msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:90
#: ../../ext/commands/api.rst:102
#: ../../ext/commands/api.rst:112
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_before_invoke:7
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_after_invoke:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:11
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:15
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:7
msgid "The invocation context."
msgstr ""

#: ../../ext/commands/api.rst:92
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:13
msgid "The error that was raised."
msgstr ""

#: ../../ext/commands/api.rst:97
msgid "An event that is called when a command is found and is about to be invoked."
msgstr ""

#: ../../ext/commands/api.rst:99
msgid "This event is called regardless of whether the command itself succeeds via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:107
msgid "An event that is called when a command has completed its invocation."
msgstr ""

#: ../../ext/commands/api.rst:109
msgid "This event is called only if the command succeeded, i.e. all checks have passed and the user input it correctly."
msgstr ""

#: ../../ext/commands/api.rst:118
msgid "Commands"
msgstr ""

#: ../../ext/commands/api.rst:121
msgid "Decorators"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:1
msgid "A decorator that transforms a function into a :class:`.Command` or if called with :func:`.group`, :class:`.Group`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:4
msgid "By default the ``help`` attribute is received automatically from the docstring of the function and is cleaned up with the use of ``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded into :class:`str` using utf-8 encoding."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:9
msgid "All checks added using the :func:`.check` & co. decorators are added into the function. There is no way to supply your own checks through this decorator."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:13
msgid "The name to create the command with. By default this uses the function name unchanged."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:16
msgid "The class to construct with. By default this is :class:`.Command`. You usually do not change this."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:18
msgid "Keyword arguments to pass into the construction of the class denoted by ``cls``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.command:21
msgid "If the function is not a coroutine or is already a command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.group:1
msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.group:3
msgid "This is similar to the :func:`.command` decorator but the ``cls`` parameter is set to :class:`Group` by default."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.group:6
msgid "The ``cls`` parameter can now be passed."
msgstr ""

#: ../../ext/commands/api.rst:130
msgid "Command"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:1
msgid "A class that implements the protocol for a bot text command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:3
msgid "These are not created manually, instead they are created via the decorator or functional interface."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:8
msgid "The name of the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:14
msgid "The coroutine that is executed when the command is called."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:16
msgid ":ref:`coroutine <coroutine>`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:20
msgid "The long help text for the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:22
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:28
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:34
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.cog_name:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.cog_name:3
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:50
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:63
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:90
msgid "Optional[:class:`str`]"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:26
msgid "The short help text for the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:32
msgid "A replacement for arguments in the default help text."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:38
msgid "The list of aliases the command can be invoked under."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:40
msgid "Union[List[:class:`str`], Tuple[:class:`str`]]"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:44
msgid "A boolean that indicates if the command is currently enabled. If the command is invoked while it is disabled, then :exc:`.DisabledCommand` is raised to the :func:`.on_command_error` event. Defaults to ``True``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:53
msgid "The parent group that this command belongs to. ``None`` if there isn't one."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:56
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.root_parent:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.root_parent:7
msgid "Optional[:class:`Group`]"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:60
msgid "The cog that this command belongs to. ``None`` if there isn't one."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:66
msgid "A list of predicates that verifies if the command could be executed with the given :class:`.Context` as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from :exc:`.CommandError` should be used. Note that if the checks fail then :exc:`.CheckFailure` exception is raised to the :func:`.on_command_error` event."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:73
msgid "List[Callable[[:class:`.Context`], :class:`bool`]]"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:77
msgid "The message prefixed into the default help command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:83
msgid "If ``True``\\, the default help command does not show this in the help output."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:90
msgid "If ``False`` and a keyword-only argument is provided then the keyword only argument is stripped and handled as if it was a regular argument that handles :exc:`.MissingRequiredArgument` and default values in a regular matter rather than passing the rest completely raw. If ``True`` then the keyword-only argument will pass in the rest of the arguments in a completely raw matter. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:101
msgid "The subcommand that was invoked, if any."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:107
msgid "If ``True`` and a variadic positional argument is specified, requires the user to specify at least one argument. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:116
msgid "If ``True``\\, ignores extraneous strings passed to a command if all its requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and ``b``). Otherwise :func:`.on_command_error` and local error handlers are called with :exc:`.TooManyArguments`. Defaults to ``True``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:125
msgid "If ``True``\\, cooldown processing is done after argument parsing, which calls converters. If ``False`` then cooldown processing is done first and then the converters are called second. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:133
msgid "A dict of user provided extras to attach to the Command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:136
msgid "This object may be copied by the library."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command:138
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:9
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:65
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:44
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:35
msgid ":class:`dict`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.after_invoke:9
msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.before_invoke:9
msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:1
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:3
msgid "A local error handler is an :func:`.on_command_error` event limited to a single command. However, the :func:`.on_command_error` is still invoked afterwards as the catch-all."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.error:7
msgid "The coroutine to register as the local error handler."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:1
msgid "Adds a check to the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:3
msgid "This is the non-decorator interface to :func:`.check`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.add_check:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.add_check:5
msgid "The function that will be used as a check."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:1
msgid "Removes a check from the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_check:3
msgid "This function is idempotent and will not raise an exception if the function is not in the command's checks."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:8
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.remove_check:8
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_check:8
msgid "The function to remove from the checks."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.update:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.update:1
msgid "Updates :class:`Command` instance with updated attribute."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.update:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.update:3
msgid "This works similarly to the :func:`.command` decorator in terms of parameters in that they are passed to the :class:`Command` or subclass constructors, sans the name and callback."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.__call__:3
msgid "Calls the internal callback that the command holds."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.__call__:7
msgid "This bypasses all mechanisms -- including checks, converters, invoke hooks, cooldowns, etc. You must take care to pass the proper arguments and types to this function."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.copy:1
msgid "Creates a copy of this command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.copy:3
msgid "A new instance of this command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.copy:4
msgid ":class:`Command`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.clean_params:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.clean_params:1
msgid "Dict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the parameter dictionary without the context or self parameters."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.clean_params:4
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.clean_params:4
msgid "Useful for inspecting signature."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.full_parent_name:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.full_parent_name:1
msgid "Retrieves the fully qualified parent command name."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.full_parent_name:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.full_parent_name:3
msgid "This the base command name required to execute it. For example, in ``?one two three`` the parent name would be ``one two``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.parents:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.parents:1
msgid "Retrieves the parents of this command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.parents:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.parents:3
msgid "If the command has no parents then it returns an empty :class:`list`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.parents:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.parents:5
msgid "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.parents:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.parents:9
msgid "List[:class:`Group`]"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.root_parent:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.root_parent:1
msgid "Retrieves the root parent of this command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.root_parent:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.root_parent:3
msgid "If the command has no parents then it returns ``None``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.root_parent:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.root_parent:5
msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.qualified_name:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.qualified_name:1
msgid "Retrieves the fully qualified command name."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.qualified_name:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.qualified_name:3
msgid "This is the full parent name with the command name as well. For example, in ``?one two three`` the qualified name would be ``one two three``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:1
msgid "Checks whether the command is currently on cooldown."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:3
msgid "The invocation context to use when checking the commands cooldown status."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:6
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.is_on_cooldown:6
msgid "A boolean indicating if the command is on cooldown."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:1
msgid "Resets the cooldown on this command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.reset_cooldown:3
msgid "The invocation context to reset the cooldown under."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:1
msgid "Retrieves the amount of seconds before this command can be tried again."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:5
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:5
msgid "The invocation context to retrieve the cooldown from."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:8
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.get_cooldown_retry_after:8
msgid "The amount of time left on this command's cooldown in seconds. If this is ``0.0`` then the command isn't on cooldown."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.has_error_handler:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.has_error_handler:1
msgid ":class:`bool`: Checks whether the command has an error handler registered."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.cog_name:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.cog_name:1
msgid "The name of the cog this command belongs to, if any."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.short_doc:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.short_doc:1
msgid "Gets the \"short\" documentation of a command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.short_doc:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.short_doc:3
msgid "By default, this is the :attr:`.brief` attribute. If that lookup leads to an empty string then the first line of the :attr:`.help` attribute is used instead."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Command.signature:1
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.Group.signature:1
msgid "Returns a POSIX-like signature useful for help command output."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:3
msgid "Checks if the command can be executed by checking all the predicates inside the :attr:`~Command.checks` attribute. This also checks whether the command is disabled."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:7
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:7
msgid "Checks whether the command is disabled or not"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:10
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:10
msgid "The ctx of the command currently being invoked."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:13
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:13
msgid "Any command error that was raised during a check call will be propagated     by this function."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:15
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Command.can_run:15
msgid "A boolean indicating if the command can be invoked."
msgstr ""

#: ../../ext/commands/api.rst:149
msgid "Group"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:1
msgid "A class that implements a grouping protocol for commands to be executed as subcommands."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:4
msgid "This class is a subclass of :class:`.Command` and thus all options valid in :class:`.Command` are valid in here as well."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:9
msgid "Indicates if the group callback should begin parsing and invocation only if no subcommand was found. Useful for making it an error handling function to tell the user that no subcommand was found or to have different functionality in case no subcommand was found. If this is ``False``, then the group callback will always be invoked first. This means that the checks and the parsing dictated by its parameters will be executed. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group:22
msgid "Indicates if the group's commands should be case insensitive. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group.copy:1
msgid "Creates a copy of this :class:`Group`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group.copy:3
msgid "A new instance of this group."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.Group.copy:4
msgid ":class:`Group`"
msgstr ""

#: ../../ext/commands/api.rst:174
msgid "GroupMixin"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:1
msgid "A mixin that implements common functionality for classes that behave similar to :class:`.Group` and are allowed to register commands."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:6
msgid "A mapping of command name to :class:`.Command` objects."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.GroupMixin:13
msgid "Whether the commands should be case insensitive. Defaults to ``False``."
msgstr ""

#: ../../ext/commands/api.rst:191
msgid "Cogs"
msgstr ""

#: ../../ext/commands/api.rst:194
msgid "Cog"
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog:1
msgid "The base class that all cogs must inherit from."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog:3
msgid "A cog is a collection of commands, listeners, and optional state to help group commands together. More information on them can be found on the :ref:`ext_commands_cogs` page."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog:7
msgid "When inheriting from this class, the options shown in :class:`CogMeta` are equally valid here."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:1
msgid "A :class:`list` of :class:`.Command`\\s that are defined inside this cog.  .. note::      This does not include subcommands."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:1
msgid "A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:6
msgid "This does not include subcommands."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_commands:7
msgid "List[:class:`.Command`]"
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_applications:1
msgid "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.qualified_name:1
msgid "Returns the cog's specified name, not the class name."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.Cog.description:1
msgid "Returns the cog's description, typically the cleaned docstring."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_commands:1
msgid "An iterator that recursively walks through this cog's commands and subcommands."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_commands:3
msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_applications:1
msgid "An iterator that recursively walks through this cog's applications and subcommands."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.walk_applications:3
msgid "Union[:class:`.ApplicationCommand`, :class:`.SlashCommandGroup`] -- A command or group from the cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_listeners:1
msgid "Returns a :class:`list` of (name, function) listener pairs that are defined in this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_listeners:3
msgid "The listeners defined in this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.get_listeners:4
msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:1
msgid "A decorator that marks a function as a listener."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:3
msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:5
msgid "The name of the event being listened to. If not provided, it defaults to the function's name."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.listener:9
msgid "The function is not a coroutine function or a string was not passed as     the name."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.has_error_handler:1
msgid ":class:`bool`: Checks whether the cog has an error handler."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_unload:1
msgid "A special method that is called when the cog gets removed."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_unload:3
msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_unload:6
msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.bot_check_once:1
msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.bot_check_once:4
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.bot_check:4
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_check:4
msgid "This function **can** be a coroutine and must take a sole parameter, ``ctx``, to represent the :class:`.Context`."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.bot_check:1
msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_check:1
msgid "A special method that registers as a :func:`~discord.ext.commands.check` for every command and subcommand in this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:1
msgid "A special method that is called whenever an error is dispatched inside this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:4
msgid "This is similar to :func:`.on_command_error` except only applying to the commands inside this cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:7
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_before_invoke:5
#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_after_invoke:5
msgid "This **must** be a coroutine."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:9
msgid "The invocation context where the error happened."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_command_error:11
msgid "The error that happened."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_before_invoke:1
msgid "A special method that acts as a cog local pre-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_before_invoke:3
msgid "This is similar to :meth:`.Command.before_invoke`."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_after_invoke:1
msgid "A special method that acts as a cog local post-invoke hook."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.Cog.cog_after_invoke:3
msgid "This is similar to :meth:`.Command.after_invoke`."
msgstr ""

#: ../../ext/commands/api.rst:202
msgid "CogMeta"
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:1
msgid "A metaclass for defining a cog."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:3
msgid "Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the :class:`abc.ABCMeta` metaclass."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:7
msgid "For example, to create an abstract cog mixin class, the following would be done."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:24
msgid "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:35
msgid "The cog name. By default, it is the name of the class with no modification."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:41
msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr ""

#: ../../../discord/ext/commands/cog.py:docstring of discord.ext.commands.cog.CogMeta:49
msgid "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"
msgstr ""

#: ../../ext/commands/api.rst:212
msgid "Help Commands"
msgstr ""

#: ../../ext/commands/api.rst:215
msgid "HelpCommand"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:1
msgid "The base implementation for help command formatting."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:5
msgid "Internally instances of this class are deep copied every time the command itself is invoked to prevent a race condition mentioned in :issue:`2123`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:9
msgid "This means that relying on the state of this class to be the same between command invocations would not work as expected."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:14
msgid "The context that invoked this help formatter. This is generally set after the help command assigned, :func:`command_callback`\\, has been called."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:17
msgid "Optional[:class:`Context`]"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:21
msgid "Specifies if hidden commands should be shown in the output. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:28
msgid "Specifies if commands should have their :attr:`.Command.checks` called and verified. If ``True``, always calls :attr:`.Command.checks`. If ``None``, only calls :attr:`.Command.checks` in a guild setting. If ``False``, never calls :attr:`.Command.checks`. Defaults to ``True``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:35
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:29
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:34
msgid "Optional[:class:`bool`]"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand:39
msgid "A dictionary of options to pass in for the construction of the help command. This allows you to change the command behaviour without actually changing the implementation of the command. The attributes will be the same as the ones passed in the :class:`.Command` constructor."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.add_check:1
msgid "Adds a check to the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_check:1
msgid "Removes a check from the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_bot_mapping:1
msgid "Retrieves the bot mapping passed to :meth:`send_bot_help`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:1
msgid "Similar to :attr:`Context.invoked_with` except properly handles the case where :meth:`Context.send_help` is used."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:4
msgid "If the help command was used regularly then this returns the :attr:`Context.invoked_with` attribute. Otherwise, if it the help command was called using :meth:`Context.send_help` then it returns the internal command name of the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.invoked_with:9
msgid "The command name that triggered this invocation."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:1
msgid "Retrieves the signature portion of the help page."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:3
msgid "The command to get the signature of."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_command_signature:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_command_signature:6
msgid "The signature for the command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:1
msgid "Removes mentions from the string to prevent abuse."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:3
msgid "This includes ``@everyone``, ``@here``, member mentions and role mentions."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.remove_mentions:5
msgid "The string with mentions removed."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:1
msgid "A property for retrieving or setting the cog for the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:3
msgid "When a cog is set for the help command, it is as-if the help command belongs to that cog. All cog special methods will apply to the help command and it will be automatically unset on unload."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:7
msgid "To unbind the cog from the help command, you can set it to ``None``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.HelpCommand.cog:9
msgid "The cog that is currently set for the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:1
msgid "|maybecoro|"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:3
msgid "A method called when a command is not found in the help command. This is useful to override for i18n."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:6
msgid "Defaults to ``No command called {0} found.``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:8
msgid "The string that contains the invalid command. Note that this has had mentions removed to prevent abuse."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_not_found:12
msgid "The string to use when a command has not been found."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:3
msgid "A method called when a command did not have a subcommand requested in the help command. This is useful to override for i18n."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:6
msgid "Defaults to either:"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:8
msgid "``'Command \"{command.qualified_name}\" has no subcommands.'``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:9
msgid "If there is no subcommand in the ``command`` parameter."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:11
msgid "``'Command \"{command.qualified_name}\" has no subcommand named {string}'``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:11
msgid "If the ``command`` parameter has subcommands but not one named ``string``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:13
msgid "The command that did not have the subcommand requested."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:15
msgid "The string that contains the invalid subcommand. Note that this has had mentions removed to prevent abuse."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.subcommand_not_found:19
msgid "The string to use when the command did not have the subcommand requested."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:3
msgid "Returns a filtered list of commands and optionally sorts them."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:5
msgid "This takes into account the :attr:`verify_checks` and :attr:`show_hidden` attributes."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:8
msgid "An iterable of commands that are getting filtered."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:10
msgid "Whether to sort the result."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:12
msgid "An optional key function to pass to :func:`py:sorted` that takes a :class:`Command` as its sole parameter. If ``sort`` is passed as ``True`` then this will default as the command name."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:17
msgid "A list of commands that passed the filter."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.filter_commands:18
msgid "List[:class:`Command`]"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:1
msgid "Returns the largest name length of the specified command list."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:3
msgid "A sequence of commands to check for the largest size."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:6
msgid "The maximum width of the commands."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_max_size:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:12
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:42
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:25
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:7
#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:8
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:42
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:9
msgid ":class:`int`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:1
msgid "Returns the :class:`~discord.abc.Messageable` where the help command will be output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:11
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:11
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:11
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:10
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:3
msgid "You can override this method to customise the behaviour."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:5
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:5
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:5
msgid "By default this returns the context's channel."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:7
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:7
msgid "The destination where the help command will be output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.get_destination:8
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_destination:8
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_destination:8
msgid ":class:`.abc.Messageable`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:3
msgid "Handles the implementation when an error happens in the help command. For example, the result of :meth:`command_not_found` will be passed here."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:8
msgid "By default, this sends the error message to the destination specified by :meth:`get_destination`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:13
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:15
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:15
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:15
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:14
msgid "You can access the invocation context with :attr:`HelpCommand.context`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_error_message:15
msgid "The error message to display to the user. Note that this has had mentions removed to prevent abuse."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:3
msgid "The help command's error handler, as specified by :ref:`ext_commands_error_handler`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:5
msgid "Useful to override if you need some specific behaviour when the error handler is called."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.on_help_command_error:8
msgid "By default this method does nothing and just propagates to the default error handlers."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:3
msgid "Handles the implementation of the bot command page in the help command. This function is called when the help command is called with no arguments."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:6
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:5
msgid "It should be noted that this method does not return anything -- rather the actual message sending should be done inside this method. Well behaved subclasses should use :meth:`get_destination` to know where to send, as this is a customisation point for other users."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:17
msgid "Also, the commands in the mapping are not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_bot_help:20
msgid "A mapping of cogs to commands that have been requested by the user for help. The key of the mapping is the :class:`~.commands.Cog` that the command belongs to, or ``None`` if there isn't one, and the value is a list of commands that belongs to that cog."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:3
msgid "Handles the implementation of the cog page in the help command. This function is called when the help command is called with a cog as the argument."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:17
msgid "To get the commands that belong to this cog see :meth:`Cog.get_commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_cog_help:21
msgid "The cog that was requested for help."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:3
msgid "Handles the implementation of the group page in the help command. This function is called when the help command is called with a group as the argument."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:17
msgid "To get the commands that belong to this group without aliases see :attr:`Group.commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_group_help:21
msgid "The group that was requested for help."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:3
msgid "Handles the implementation of the single command page in the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:16
msgid "Showing Help"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:19
msgid "There are certain attributes and methods that are helpful for a help command to show such as the following:"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:22
msgid ":attr:`Command.help`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:23
msgid ":attr:`Command.brief`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:24
msgid ":attr:`Command.short_doc`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:25
msgid ":attr:`Command.description`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:26
msgid ":meth:`get_command_signature`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:28
msgid "There are more than just these attributes but feel free to play around with these to help you get started to get the output that you want."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.send_command_help:31
msgid "The command that was requested for help."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:3
msgid "A low level method that can be used to prepare the help command before it does anything. For example, if you need to prepare some state in your subclass before the command does its processing then this would be the place to do it."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:8
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:3
msgid "The default implementation does nothing."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:12
msgid "This is called *inside* the help command callback body. So all the usual rules that happen inside apply here as well."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.prepare_help_command:17
msgid "The argument passed to the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:3
msgid "The actual implementation of the help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:5
msgid "It is not recommended to override this method and instead change the behaviour through the methods that actually get dispatched."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:8
msgid ":meth:`send_bot_help`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:9
msgid ":meth:`send_cog_help`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:10
msgid ":meth:`send_group_help`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:11
msgid ":meth:`send_command_help`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:12
msgid ":meth:`get_destination`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:13
msgid ":meth:`command_not_found`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:14
msgid ":meth:`subcommand_not_found`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:15
msgid ":meth:`send_error_message`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:16
msgid ":meth:`on_help_command_error`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.HelpCommand.command_callback:17
msgid ":meth:`prepare_help_command`"
msgstr ""

#: ../../ext/commands/api.rst:223
msgid "DefaultHelpCommand"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:1
msgid "The implementation of the default help command."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:3
msgid "This inherits from :class:`HelpCommand`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:5
msgid "It extends it with the following attributes."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:9
msgid "The maximum number of characters that fit in a line. Defaults to 80."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:16
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:7
msgid "Whether to sort the commands in the output alphabetically. Defaults to ``True``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:22
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:27
msgid "A tribool that indicates if the help command should DM the user instead of sending it to the channel it received it from. If the boolean is set to ``True``, then all help output is DM'd. If ``False``, none of the help output is DM'd. If ``None``, then the bot will only DM when the help message becomes too long (dictated by more than :attr:`dm_help_threshold` characters). Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:33
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:38
msgid "The number of characters the paginator must accumulate before getting DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:40
msgid "How much to indent the commands from a heading. Defaults to ``2``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:46
msgid "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:53
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:45
msgid "The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to ``\"No Category\"``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:60
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:52
msgid "The paginator used to paginate the help command output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand:62
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:54
msgid ":class:`Paginator`"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.shorten_text:1
msgid ":class:`str`: Shortens text to fit into the :attr:`width`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.get_ending_note:1
msgid ":class:`str`: Returns help command's ending note. This is mainly useful to override for i18n purposes."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:1
msgid "Indents a list of commands after the specified heading."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:3
msgid "The formatting is added to the :attr:`paginator`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:5
msgid "The default implementation is the command name indented by :attr:`indent` spaces, padded to ``max_size`` followed by the command's :attr:`Command.short_doc` and then shortened to fit into the :attr:`width`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:10
msgid "A list of commands to indent for output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:12
msgid "The heading to add to the output. This is only added if the list of commands is greater than 0."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_indented_commands:15
msgid "The max size to use for the gap between indents. If unspecified, calls :meth:`~HelpCommand.get_max_size` on the commands parameter."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.send_pages:1
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.send_pages:1
msgid "A helper utility to send the page output from :attr:`paginator` to the destination."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_command_formatting:1
msgid "A utility function to format the non-indented block of commands and groups."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.DefaultHelpCommand.add_command_formatting:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_command_formatting:3
msgid "The command to format."
msgstr ""

#: ../../ext/commands/api.rst:232
msgid "MinimalHelpCommand"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:1
msgid "An implementation of a help command with minimal output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:13
msgid "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands\"``"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand:20
msgid "The alias list's heading string used to list the aliases of the command. Useful for i18n. Defaults to ``\"Aliases:\"``."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:1
msgid "Returns help command's opening note. This is mainly useful to override for i18n purposes."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:3
msgid "The default implementation returns ::"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_opening_note:8
msgid "The help command opening note."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:1
msgid "Return the help command's ending note. This is mainly useful to override for i18n purposes."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.get_ending_note:5
msgid "The help command ending note."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:1
msgid "Adds the minified bot heading with commands to the output."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:3
#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:3
msgid "The formatting should be added to the :attr:`paginator`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:5
msgid "The default implementation is a bold underline heading followed by commands separated by an EN SPACE (U+2002) in the next line."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:8
msgid "A list of commands that belong to the heading."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:10
msgid "The heading to add to the line."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:1
msgid "Adds formatting information on a subcommand."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:5
msgid "The default implementation is the prefix and the :attr:`Command.qualified_name` optionally followed by an En dash and the command's :attr:`Command.short_doc`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:8
msgid "The command to show information of."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:1
msgid "Adds the formatting information on a command's aliases."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:5
msgid "The default implementation is the :attr:`aliases_heading` bolded followed by a comma separated list of aliases."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:8
msgid "This is not called if there are no aliases to format."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:10
msgid "A list of aliases to format."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.MinimalHelpCommand.add_command_formatting:1
msgid "A utility function to format commands and groups."
msgstr ""

#: ../../ext/commands/api.rst:241
msgid "Paginator"
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:1
msgid "A class that aids in paginating code blocks for Discord messages."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:7
msgid "Returns the total number of characters in the paginator."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:11
msgid "The prefix inserted to every page. e.g. three backticks."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:17
msgid "The suffix appended at the end of every page. e.g. three backticks."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:23
msgid "The maximum amount of codepoints allowed in a page."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator:32
msgid "The character string inserted between lines. e.g. a newline character."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.clear:1
msgid "Clears the paginator to have no pages."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:1
msgid "Adds a line to the current page."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:3
msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:6
msgid "The line to add."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:8
msgid "Indicates if another empty line should be added."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.add_line:11
msgid "The line was too big for the current :attr:`max_size`."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.help.Paginator.close_page:1
msgid "Prematurely terminate a page."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.Paginator.pages:1
msgid "Returns the rendered list of pages."
msgstr ""

#: ../../../discord/ext/commands/help.py:docstring of discord.ext.commands.Paginator.pages:3
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:74
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:17
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingPermissions:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingPermissions:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:17
msgid "List[:class:`str`]"
msgstr ""

#: ../../ext/commands/api.rst:249
msgid "Enums"
msgstr ""

#: ../../ext/commands/api.rst:254
msgid "Specifies a type of bucket for, e.g. a cooldown."
msgstr ""

#: ../../ext/commands/api.rst:258
msgid "The default bucket operates on a global basis."
msgstr ""

#: ../../ext/commands/api.rst:261
msgid "The user bucket operates on a per-user basis."
msgstr ""

#: ../../ext/commands/api.rst:264
msgid "The guild bucket operates on a per-guild basis."
msgstr ""

#: ../../ext/commands/api.rst:267
msgid "The channel bucket operates on a per-channel basis."
msgstr ""

#: ../../ext/commands/api.rst:270
msgid "The member bucket operates on a per-member basis."
msgstr ""

#: ../../ext/commands/api.rst:273
msgid "The category bucket operates on a per-category basis."
msgstr ""

#: ../../ext/commands/api.rst:276
msgid "The role bucket operates on a per-role basis."
msgstr ""

#: ../../ext/commands/api.rst:284
msgid "Checks"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:1
msgid "A decorator that adds a check to the :class:`.Command` or its subclasses. These checks could be accessed via :attr:`.Command.checks`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:4
msgid "These checks should be predicates that take in a single parameter taking a :class:`.Context`. If the check returns a ``False``\\-like value then during invocation a :exc:`.CheckFailure` exception is raised and sent to the :func:`.on_command_error` event."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:9
msgid "If an exception should be thrown in the predicate then it should be a subclass of :exc:`.CommandError`. Any exception not subclassed from it will be propagated while those subclassed will be sent to :func:`.on_command_error`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:14
msgid "A special attribute named ``predicate`` is bound to the value returned by this decorator to retrieve the predicate passed to the decorator. This allows the following introspection and chaining to be done:"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:30
msgid "The function returned by ``predicate`` is **always** a coroutine, even if the original function was not a coroutine."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:33
msgid "The ``predicate`` attribute was added."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:38
msgid "Creating a basic check to see if the command invoker is you."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:50
msgid "Transforming common checks into its own decorator:"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check:64
msgid "The predicate to check if the command should be invoked."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:1
msgid "A :func:`check` that is added that checks if any of the checks passed will pass, i.e. using logical OR."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:4
msgid "If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the failure. It inherits from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:9
msgid "The ``predicate`` attribute for this function **is** a coroutine."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:13
msgid "An argument list of checks that have been decorated with the :func:`check` decorator."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:17
msgid "A check passed has not been decorated with the :func:`check`     decorator."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.check_any:21
msgid "Creating a basic check to see if it's the bot owner or the server owner:"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:1
msgid "A :func:`.check` that is added that checks if the member invoking the command has the role specified via the name or ID specified."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:4
msgid "If a string is specified, you must give the exact name of the role, including caps and spelling."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:7
msgid "If an integer is specified, you must give the exact snowflake ID of the role."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:9
msgid "If the message is invoked in a private message context then the check will return ``False``."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:12
msgid "This check raises one of two special exceptions, :exc:`.MissingRole` if the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:18
msgid "Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_role:21
msgid "The name or ID of the role to check."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:1
msgid "A :func:`.check` that is added that checks if the member has all of the permissions necessary."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:4
msgid "Note that this check operates on the current channel permissions, not the guild wide permissions."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:7
msgid "The permissions passed in must be exactly like the properties shown under :class:`.discord.Permissions`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:10
msgid "This check raises a special exception, :exc:`.MissingPermissions` that is inherited from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_permissions:13
msgid "An argument list of permissions to check for."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_guild_permissions:1
msgid "Similar to :func:`.has_permissions`, but operates on guild wide permissions instead of the current channel permissions."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_guild_permissions:4
msgid "If this check is called in a DM context, it will raise an exception, :exc:`.NoPrivateMessage`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:1
msgid "A :func:`.check` that is added that checks if the member invoking the command has **any** of the roles specified. This means that if they have one out of the three roles specified, then this check will return `True`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:5
msgid "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:7
msgid "This check raises one of two special exceptions, :exc:`.MissingAnyRole` if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:13
msgid "Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.has_any_role:16
msgid "An argument list of names or IDs to check that the member has roles wise."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_role:1
msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_role:4
msgid "This check raises one of two special exceptions, :exc:`.BotMissingRole` if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_role:10
msgid "Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_permissions:1
msgid "Similar to :func:`.has_permissions` except checks if the bot itself has the permissions listed."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_permissions:4
msgid "This check raises a special exception, :exc:`.BotMissingPermissions` that is inherited from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_guild_permissions:1
msgid "Similar to :func:`.has_guild_permissions`, but checks the bot members guild permissions."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_any_role:1
msgid "Similar to :func:`.has_any_role` except checks if the bot itself has any of the roles listed."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_any_role:4
msgid "This check raises one of two special exceptions, :exc:`.BotMissingAnyRole` if the bot is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.bot_has_any_role:10
msgid "Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic checkfailure"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:1
msgid "A decorator that adds a cooldown to a :class:`.Command`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:3
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:8
msgid "A cooldown allows a command to only be used a specific amount of times in a specific time frame. These cooldowns can be based either on a per-guild, per-channel, per-user, per-role or global basis. Denoted by the third argument of ``type`` which must be of enum type :class:`.BucketType`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:9
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:14
msgid "If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered in :func:`.on_command_error` and the local error handler."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:12
#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:17
msgid "A command can only have a single cooldown."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:14
msgid "The number of times a command can be used before triggering a cooldown."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:16
msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:18
msgid "The type of cooldown to have. If callable, should return a key for the mapping.  .. versionchanged:: 1.7     Callables are now supported for custom bucket types."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:18
msgid "The type of cooldown to have. If callable, should return a key for the mapping."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.cooldown:20
msgid "Callables are now supported for custom bucket types."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:1
msgid "A decorator that adds a dynamic cooldown to a :class:`.Command`"
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:3
msgid "This differs from :func:`.cooldown` in that it takes a function that accepts a single parameter of type :class:`.discord.Message` and must return a :class:`.Cooldown` or ``None``. If ``None`` is returned then that cooldown is effectively bypassed."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:21
msgid "A function that takes a message and returns a cooldown that will apply to this invocation or ``None`` if the cooldown should be bypassed."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dynamic_cooldown:24
msgid "The type of cooldown to have."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:1
msgid "A decorator that adds a maximum concurrency to a :class:`.Command` or its subclasses."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:3
msgid "This enables you to only allow a certain number of command invocations at the same time, for example if a command takes too long or if only one user can use it at a time. This differs from a cooldown in that there is no set waiting period or token bucket -- only a set number of people can run the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:10
msgid "The maximum number of invocations of this command that can be running at the same time."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:12
msgid "The bucket that this concurrency is based on, e.g. ``BucketType.guild`` would allow it to be used up to ``number`` times per guild."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.max_concurrency:15
msgid "Whether the command should wait for the queue to be over. If this is set to ``False`` then instead of waiting until the command can run again, the command raises :exc:`.MaxConcurrencyReached` to its error handler. If this is set to ``True`` then the command waits until it can be executed."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.before_invoke:3
msgid "This allows you to refer to one before invoke hook for several commands that do not have to be within the same cog."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.after_invoke:3
msgid "This allows you to refer to one after invoke hook for several commands that do not have to be within the same cog."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.guild_only:1
msgid "A :func:`.check` that indicates this command must only be used in a guild context only. Basically, no private messages are allowed when using the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.guild_only:5
msgid "This check raises a special exception, :exc:`.NoPrivateMessage` that is inherited from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dm_only:1
msgid "A :func:`.check` that indicates this command must only be used in a DM context. Only private messages are allowed when using the command."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.dm_only:5
msgid "This check raises a special exception, :exc:`.PrivateMessageOnly` that is inherited from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_owner:1
msgid "A :func:`.check` that checks if the person invoking this command is the owner of the bot."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_owner:4
msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_owner:6
msgid "This check raises a special exception, :exc:`.NotOwner` that is derived from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_nsfw:1
msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_nsfw:3
msgid "This check raises a special exception, :exc:`.NSFWChannelRequired` that is derived from :exc:`.CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/core.py:docstring of discord.ext.commands.core.is_nsfw:8
msgid "Raise :exc:`.NSFWChannelRequired` instead of generic :exc:`.CheckFailure`. DM channels will also now pass this check."
msgstr ""

#: ../../ext/commands/api.rst:346
msgid "Cooldown"
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:1
msgid "Represents a cooldown for a command."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:5
msgid "The total number of tokens available per :attr:`per` seconds."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown:11
msgid "The length of the cooldown period in seconds."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:1
msgid "Returns the number of available tokens before rate limiting is applied."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:3
msgid "The time in seconds since Unix epoch to calculate tokens at. If not supplied then :func:`time.time()` is used."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_tokens:7
msgid "The number of tokens available before the cooldown is to be applied."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:1
msgid "Returns the time in seconds until the cooldown will be reset."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:3
msgid "The current time in seconds since Unix epoch. If not supplied, then :func:`time.time()` is used."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.get_retry_after:7
msgid "The number of seconds to wait before this cooldown will be reset."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:1
msgid "Updates the cooldown rate limit."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:3
msgid "The time in seconds since Unix epoch to update the rate limit at. If not supplied, then :func:`time.time()` is used."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:7
msgid "The retry-after time in seconds if rate limited."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.update_rate_limit:8
msgid "Optional[:class:`float`]"
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.reset:1
msgid "Reset the cooldown to its initial state."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.copy:1
msgid "Creates a copy of this cooldown."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.copy:3
msgid "A new instance of this cooldown."
msgstr ""

#: ../../../discord/ext/commands/cooldowns.py:docstring of discord.ext.commands.cooldowns.Cooldown.copy:4
msgid ":class:`Cooldown`"
msgstr ""

#: ../../ext/commands/api.rst:354
msgid "Context"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:1
msgid "Represents the context in which a command is being invoked under."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:3
msgid "This class contains a lot of meta data to help you understand more about the invocation context. This class is not created manually and is instead passed around to commands as the first parameter."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:7
msgid "This class implements the :class:`~discord.abc.Messageable` ABC."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:11
msgid "The message that triggered the command being executed."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:13
#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:13
msgid ":class:`.Message`"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:17
msgid "The bot that contains the command being executed."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:19
msgid ":class:`.Bot`"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:23
msgid "The list of transformed arguments that were passed into the command. If this is accessed during the :func:`.on_command_error` event then this list could be incomplete."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:27
msgid ":class:`list`"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:31
msgid "A dictionary of transformed arguments that were passed into the command. Similar to :attr:`args`\\, if this is accessed in the :func:`.on_command_error` event then this dict could be incomplete."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:39
msgid "The parameter that is currently being inspected and converted. This is only of use for within converters."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:44
msgid "Optional[:class:`inspect.Parameter`]"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:48
msgid "The prefix that was used to invoke the command."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:54
msgid "The command that is being invoked currently."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:60
msgid "The command name that triggered this invocation. Useful for finding out which alias called the command."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:67
msgid "The command names of the parents that triggered this invocation. Useful for finding out which aliases called the command."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:70
msgid "For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:78
msgid "The subcommand that was invoked. If no valid subcommand was invoked then this is equal to ``None``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:85
msgid "The string that was attempted to call a subcommand. This does not have to point to a valid registered subcommand and could just point to a nonsense string. If nothing was passed to attempt a call to a subcommand then this is set to ``None``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context:94
msgid "A boolean that indicates if the command failed to be parsed, checked, or invoked."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:1
msgid "Returns an :class:`~discord.AsyncIterator` that enables receiving the destination's message history."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:3
msgid "You must have :attr:`~discord.Permissions.read_message_history` permissions to use this."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:14
msgid "Flattening into a list: ::"
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:21
msgid "The number of messages to retrieve. If ``None``, retrieves every message in the channel. Note, however, that this would make it a slow operation."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:25
msgid "Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:29
msgid "Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:33
msgid "Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number then this will return at most limit + 1 messages."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:39
msgid "If set to ``True``, return messages in oldest->newest order. Defaults to ``True`` if ``after`` is specified, otherwise ``False``."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:43
msgid "You do not have permissions to get channel message history."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:44
msgid "The request to get message history failed."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.history:46
msgid ":class:`~discord.Message` -- The message with the message data parsed."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.typing:1
msgid "Returns a context manager that allows you to type for an indefinite period of time."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.typing:3
msgid "This is useful for denoting long computations in your bot."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.typing:7
msgid "This is both a regular context manager and an async context manager. This means that both ``with`` and ``async with`` work with this."
msgstr ""

#: ../../../discord/abc.py:docstring of discord.abc.Messageable.typing:10
msgid "Example Usage: ::"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:3
msgid "Calls a command with the arguments given."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:5
msgid "This is useful if you want to just call the callback that a :class:`.Command` holds internally."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:10
msgid "This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:14
msgid "You must take care in passing the proper arguments when using this function."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:17
msgid "The command that is going to be called."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:19
msgid "The arguments to use."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:20
msgid "The keyword arguments to use."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.invoke:22
msgid "The command argument to invoke is missing."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:3
msgid "Calls the command again."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:5
msgid "This is similar to :meth:`~.Context.invoke` except that it bypasses checks, cooldowns, and error handlers."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:10
msgid "If you want to bypass :exc:`.UserInputError` derived exceptions, it is recommended to use the regular :meth:`~.Context.invoke` as it will work more naturally. After all, this will end up using the old arguments the user has used and will thus just fail again."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:16
msgid "Whether to call the before and after invoke hooks."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:18
msgid "Whether to start the call chain from the very beginning or where we left off (i.e. the command that caused the error). The default is to start where we left off."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reinvoke:23
msgid "The context to reinvoke is not valid."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.valid:1
msgid "Checks if the invocation context is valid to be invoked with."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.clean_prefix:1
msgid "The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of ``<@id>``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.cog:1
msgid "Returns the cog associated with this context's command. None if it does not exist."
msgstr ""

#: ../../docstring of discord.ext.commands.Context.guild:1
msgid "Returns the guild associated with this context's command. None if not available."
msgstr ""

#: ../../docstring of discord.ext.commands.Context.channel:1
msgid "Returns the channel associated with this context's command. Shorthand for :attr:`.Message.channel`."
msgstr ""

#: ../../docstring of discord.ext.commands.Context.channel:4
msgid "Union[:class:`.abc.Messageable`]"
msgstr ""

#: ../../docstring of discord.ext.commands.Context.author:1
msgid "Union[:class:`~discord.User`, :class:`.Member`]: Returns the author associated with this context's command. Shorthand for :attr:`.Message.author`"
msgstr ""

#: ../../docstring of discord.ext.commands.Context.me:1
msgid "Union[:class:`.Member`, :class:`.ClientUser`]: Similar to :attr:`.Guild.me` except it may return the :class:`.ClientUser` in private message contexts."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.voice_client:1
msgid "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.Context.voice_client:3
msgid "Optional[:class:`.VoiceProtocol`]"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:3
msgid "Shows the help command for the specified entity if given. The entity can be a command or a cog."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:6
msgid "If no entity is given, then it'll show help for the entire bot."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:9
msgid "If the entity is a string, then it looks up whether it's a :class:`Cog` or a :class:`Command`."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:14
msgid "Due to the way this function works, instead of returning something similar to :meth:`~.commands.HelpCommand.command_not_found` this returns :class:`None` on bad input or no help command."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:18
msgid "The entity to show help for."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.send_help:21
msgid "The result of the help command, if any."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:3
msgid "Retrieves a single :class:`~discord.Message` from the destination."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:5
msgid "The message ID to look for."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:8
msgid "The specified message was not found."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:9
msgid "You do not have the permissions required to get a message."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:10
msgid "Retrieving the message failed."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:12
msgid "The message asked for."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.fetch_message:13
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:72
msgid ":class:`~discord.Message`"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:3
msgid "Retrieves all messages that are currently pinned in the channel."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:7
msgid "Due to a limitation with the Discord API, the :class:`.Message` objects returned by this method do not contain complete :attr:`.Message.reactions` data."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:11
msgid "Retrieving the pinned messages failed."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:13
msgid "The messages that are currently pinned."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.pins:14
msgid "List[:class:`~discord.Message`]"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:3
msgid "A shortcut method to :meth:`.abc.Messageable.send` to reply to the :class:`.Message`."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:8
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:67
msgid "Sending the message failed."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:9
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:68
msgid "You do not have the proper permissions to send the message."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:10
msgid "The ``files`` list is not of the appropriate size or     you specified both ``file`` and ``files``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.ext.commands.context.Context.reply:12
#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:71
msgid "The message that was sent."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:3
msgid "Sends a message to the destination with the content given."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:5
msgid "The content must be a type that can convert to a string through ``str(content)``. If the content is set to ``None`` (the default), then the ``embed`` parameter must be provided."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:9
msgid "To upload a single file, the ``file`` parameter should be used with a single :class:`~discord.File` object. To upload multiple files, the ``files`` parameter should be used with a :class:`list` of :class:`~discord.File` objects. **Specifying both parameters will lead to an exception**."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:14
msgid "To upload a single embed, the ``embed`` parameter should be used with a single :class:`~discord.Embed` object. To upload multiple embeds, the ``embeds`` parameter should be used with a :class:`list` of :class:`~discord.Embed` objects. **Specifying both parameters will lead to an exception**."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:19
msgid "The content of the message to send."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:21
msgid "Indicates if the message should be sent using text-to-speech."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:23
msgid "The rich embed for the content."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:25
msgid "The file to upload."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:27
msgid "A list of files to upload. Must be a maximum of 10."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:29
msgid "The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:32
msgid "If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:36
msgid "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead.  .. versionadded:: 1.4"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:36
msgid "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:45
msgid "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``.  .. versionadded:: 1.6"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:45
msgid "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:52
msgid "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``.  .. versionadded:: 1.6"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:52
msgid "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:56
msgid "A Discord UI View to add to the message."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:58
msgid "A list of embeds to upload. Must be a maximum of 10.  .. versionadded:: 2.0"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:58
msgid "A list of embeds to upload. Must be a maximum of 10."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:62
msgid "A list of stickers to upload. Must be a maximum of 3.  .. versionadded:: 2.0"
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:62
msgid "A list of stickers to upload. Must be a maximum of 3."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.send:69
msgid "The ``files`` list is not of the appropriate size,     you specified both ``file`` and ``files``,     or you specified both ``embed`` and ``embeds``,     or the ``reference`` object is not a :class:`~discord.Message`,     :class:`~discord.MessageReference` or :class:`~discord.PartialMessage`."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.trigger_typing:3
msgid "Triggers a *typing* indicator to the destination."
msgstr ""

#: ../../../discord/ext/commands/context.py:docstring of discord.abc.Messageable.trigger_typing:5
msgid "*Typing* indicator will go away after 10 seconds, or after a message is sent."
msgstr ""

#: ../../ext/commands/api.rst:372
msgid "Converters"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter:1
msgid "The base class of custom converters that require the :class:`.Context` to be passed to be useful."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter:4
msgid "This allows you to implement converters that function similar to the special cased ``discord`` classes."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter:7
msgid "Classes that derive from this should override the :meth:`~.Converter.convert` method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:3
msgid "The method to override to do conversion logic."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:5
msgid "If an error is found while converting, it is recommended to raise a :exc:`.CommandError` derived exception as it will properly propagate to the error handlers."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:9
msgid "The invocation context that the argument is being used in."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:11
msgid "The argument that is being converted."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:14
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:14
msgid "A generic exception occurred when converting the argument."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Converter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter.convert:15
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content.convert:15
msgid "The converter failed to convert the argument."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter:1
msgid "Converts to a :class:`~discord.Object`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter:3
msgid "The argument must follow the valid ID or mention formats (e.g. `<@80088516616269824>`)."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter:7
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:6
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter:6
msgid "The lookup strategy is as follows (in order):"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:7
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:7
msgid "Lookup by ID."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ObjectConverter:10
msgid "Lookup by member, role, or channel mention."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:1
msgid "Converts to a :class:`~discord.Member`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:5
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:3
msgid "All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:8
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:9
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:8
msgid "Lookup by mention."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:9
msgid "Lookup by name#discrim"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:11
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:12
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:10
msgid "Lookup by name"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:12
msgid "Lookup by nickname"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:14
msgid "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MemberConverter:17
msgid "This converter now lazily fetches members from the gateway and HTTP APIs, optionally caching the result if :attr:`.MemberCacheFlags.joined` is enabled."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:1
msgid "Converts to a :class:`~discord.User`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:3
msgid "All lookups are via the global user cache."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:12
msgid "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.UserConverter:15
msgid "This converter now lazily fetches users from the HTTP APIs if an ID is passed and it's not available in cache."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:1
msgid "Converts to a :class:`discord.Message`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:7
msgid "Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:8
msgid "Lookup by message ID (the message **must** be in the context channel)"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:9
msgid "Lookup by message URL"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.MessageConverter:11
msgid "Raise :exc:`.ChannelNotFound`, :exc:`.MessageNotFound` or :exc:`.ChannelNotReadable` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter:1
msgid "Converts to a :class:`discord.PartialMessage`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter:5
msgid "The creation strategy is as follows (in order):"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter:7
msgid "By \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter:8
msgid "By message ID (The message is assumed to be in the context channel.)"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialMessageConverter:9
msgid "By message URL"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:1
msgid "Converts to a :class:`~discord.abc.GuildChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:10
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:9
msgid "Lookup by name."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:1
msgid "Converts to a :class:`~discord.TextChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.TextChannelConverter:12
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:12
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:12
msgid "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.VoiceChannelConverter:1
msgid "Converts to a :class:`~discord.VoiceChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StoreChannelConverter:1
msgid "Converts to a :class:`~discord.StoreChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.StageChannelConverter:1
msgid "Converts to a :class:`~discord.StageChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.CategoryChannelConverter:1
msgid "Converts to a :class:`~discord.CategoryChannel`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter:1
msgid "Converts to a :class:`~discord.Invite`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter:3
msgid "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.InviteConverter:5
msgid "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter:1
msgid "Converts to a :class:`~discord.Guild`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildConverter:6
msgid "Lookup by name. (There is no disambiguation for Guilds with multiple matching names)."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:1
msgid "Converts to a :class:`~discord.Role`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:3
msgid "All lookups are via the local guild. If in a DM context, the converter raises :exc:`.NoPrivateMessage` exception."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.RoleConverter:12
msgid "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GameConverter:1
msgid "Converts to :class:`~discord.Game`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:1
msgid "Converts to a :class:`~discord.Colour`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:3
msgid "Add an alias named ColorConverter"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:6
msgid "The following formats are accepted:"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:8
msgid "``0x<hex>``"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:9
msgid "``#<hex>``"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:10
msgid "``0x#<hex>``"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:11
msgid "``rgb(<number>, <number>, <number>)``"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:12
msgid "Any of the ``classmethod`` in :class:`~discord.Colour`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:14
msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:16
msgid "Like CSS, ``<number>`` can be either 0-255 or 0-100% and ``<hex>`` can be either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff)."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:19
msgid "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ColourConverter:22
msgid "Added support for ``rgb`` function and 3-digit hex shortcuts"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:1
msgid "Converts to a :class:`~discord.Emoji`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:3
#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter:3
msgid "All lookups are done for the local guild first, if available. If that lookup fails, then it checks the client's global cache."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:9
msgid "Lookup by extracting ID from the emoji."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.EmojiConverter:12
msgid "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter:1
msgid "Converts to a :class:`~discord.PartialEmoji`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter:3
msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.PartialEmojiConverter:5
msgid "Raise :exc:`.PartialEmojiConversionFailure` instead of generic :exc:`.BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:1
msgid "Coverts to a :class:`~discord.Thread`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.ThreadConverter:3
msgid "All lookups are via the local guild."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter:1
msgid "Converts to a :class:`~discord.GuildSticker`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.GuildStickerConverter:8
msgid "1. Lookup by ID. 3. Lookup by name"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:1
msgid "Converts the argument to mention scrubbed version of said content."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:4
msgid "This behaves similarly to :attr:`~discord.Message.clean_content`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:8
msgid "Whether to clean channel mentions."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:14
msgid "Whether to use nicknames when transforming mentions."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:20
msgid "Whether to also escape special markdown characters."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.clean_content:26
msgid "Whether to also remove special markdown characters. This option is not supported with ``escape_markdown``"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Greedy:1
msgid "A special converter that greedily consumes arguments until it can't. As a consequence of this behaviour, most input errors are silently discarded, since it is used as an indicator of when to stop parsing."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Greedy:5
msgid "When a parser error is met the greedy converter stops converting, undoes the internal string parsing routine, and continues parsing regularly."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Greedy:8
msgid "For example, in the following code:"
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Greedy:16
msgid "An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.Greedy:19
msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:3
msgid "Runs converters for a given converter, argument, and parameter."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:5
msgid "This function does the same work that the library does under the hood."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:9
msgid "The invocation context to run the converters under."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:11
msgid "The converter to run, this corresponds to the annotation in the function."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:13
msgid "The argument to convert to."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:15
msgid "The parameter being converted. This is mainly for error reporting."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:18
msgid "The converter failed to convert."
msgstr ""

#: ../../../discord/ext/commands/converter.py:docstring of discord.ext.commands.converter.run_converters:20
msgid "The resulting conversion."
msgstr ""

#: ../../ext/commands/api.rst:445
msgid "Flag Converter"
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:1
msgid "A converter that allows for a user-friendly flag syntax."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:3
msgid "The flags are defined using :pep:`526` type annotations similar to the :mod:`dataclasses` Python module. For more information on how this converter works, check the appropriate :ref:`documentation <ext_commands_flag_converter>`."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:12
msgid "Returns an iterator of ``(flag_name, flag_value)`` pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:18
msgid "A class parameter to toggle case insensitivity of the flag parsing. If ``True`` then flags are parsed in a case insensitive manner. Defaults to ``False``."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:22
msgid "The prefix that all flags must be prefixed with. By default there is no prefix."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter:25
msgid "The delimiter that separates a flag's argument from the flag's name. By default this is ``:``."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.get_flags:1
msgid "Dict[:class:`str`, :class:`Flag`]: A mapping of flag name to flag object this converter has."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:3
msgid "The method that actually converters an argument to the flag mapping."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:5
msgid "The flag converter class."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:9
msgid "The argument to convert from."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:12
msgid "A flag related parsing error."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:13
msgid "A command related error."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:15
msgid "The flag converter instance with all flags parsed."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.FlagConverter.convert:16
msgid ":class:`FlagConverter`"
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:1
msgid "Represents a flag parameter for :class:`FlagConverter`."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:3
msgid "The :func:`~discord.ext.commands.flag` function helps create these flag objects, but it is not necessary to do so. These cannot be constructed manually."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:9
msgid "The name of the flag."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:15
msgid "The aliases of the flag name."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:21
msgid "The attribute in the class that corresponds to this flag."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:27
msgid "The default value of the flag, if available."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:29
#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:35
msgid "Any"
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:33
msgid "The underlying evaluated annotation of the flag."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:39
msgid "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.Flag:46
msgid "Whether multiple given values overrides the previous value."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.Flag.required:1
msgid "Whether the flag is required."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.Flag.required:3
msgid "A required flag has no default value."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:1
msgid "Override default functionality and parameters of the underlying :class:`FlagConverter` class attributes."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:4
msgid "The flag name. If not given, defaults to the attribute name."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:6
msgid "Aliases to the flag name. If not given no aliases are set."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:8
msgid "The default parameter. This could be either a value or a callable that takes :class:`Context` as its sole parameter. If not given then it defaults to the default value given to the attribute."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:12
msgid "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments. The default value depends on the annotation given."
msgstr ""

#: ../../../discord/ext/commands/flags.py:docstring of discord.ext.commands.flags.flag:16
msgid "Whether multiple given values overrides the previous value. The default value depends on the annotation given."
msgstr ""

#: ../../ext/commands/api.rst:458
msgid "Exceptions"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandError:1
msgid "The base exception type for all command related errors."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandError:3
msgid "This inherits from :exc:`discord.DiscordException`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandError:5
msgid "This exception and exceptions inherited from it are handled in a special way as they are caught and passed into a special event from :class:`.Bot`\\, :func:`.on_command_error`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:1
msgid "Exception raised when a Converter class raises non-CommandError."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandNotFound:7
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserInputError:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:3
msgid "This inherits from :exc:`CommandError`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:7
msgid "The converter that failed."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:9
msgid ":class:`discord.ext.commands.Converter`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:13
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandInvokeError:7
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:13
msgid "The original exception that was raised. You can also get this via the ``__cause__`` attribute."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ConversionError:16
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandInvokeError:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:16
msgid ":exc:`Exception`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredArgument:1
msgid "Exception raised when parsing a command and a parameter that is required is not encountered."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredArgument:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadArgument:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyArguments:4
msgid "This inherits from :exc:`UserInputError`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredArgument:8
msgid "The argument that is missing."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredArgument:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:10
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:12
msgid ":class:`inspect.Parameter`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ArgumentParsingError:1
msgid "An exception raised when the parser fails to parse a user's input."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ArgumentParsingError:3
msgid "This inherits from :exc:`UserInputError`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ArgumentParsingError:5
msgid "There are child classes that implement more granular parsing errors for i18n purposes."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UnexpectedQuoteError:1
msgid "An exception raised when the parser encounters a quote mark inside a non-quoted string."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UnexpectedQuoteError:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.InvalidEndOfQuotedStringError:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExpectedClosingQuoteError:3
msgid "This inherits from :exc:`ArgumentParsingError`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UnexpectedQuoteError:7
msgid "The quote mark that was found inside the non-quoted string."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.InvalidEndOfQuotedStringError:1
msgid "An exception raised when a space is expected after the closing quote in a string but a different character is found."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.InvalidEndOfQuotedStringError:8
msgid "The character found instead of the expected string."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExpectedClosingQuoteError:1
msgid "An exception raised when a quote character is expected but not found."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExpectedClosingQuoteError:7
msgid "The quote character expected."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadArgument:1
msgid "Exception raised when a parsing or conversion failure is encountered on an argument to pass into a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:1
msgid "Exception raised when a :data:`typing.Union` converter fails for all its associated types."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:8
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:10
msgid "The parameter that failed being converted."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:14
msgid "A tuple of converters attempted in conversion, in order of failure."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:16
msgid "Tuple[Type, ``...``]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:20
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:22
msgid "A list of errors that were caught from failing the conversion."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadUnionArgument:22
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:24
msgid "List[:class:`CommandError`]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:1
msgid "Exception raised when a :data:`typing.Literal` converter fails for all its associated values."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:16
msgid "A tuple of values compared against in conversion, in order of failure."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadLiteralArgument:18
msgid "Tuple[Any, ``...``]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PrivateMessageOnly:1
msgid "Exception raised when an operation does not work outside of private message contexts."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PrivateMessageOnly:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NoPrivateMessage:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NotOwner:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingPermissions:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingPermissions:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRole:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingRole:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingAnyRole:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingAnyRole:4
msgid "This inherits from :exc:`CheckFailure`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NoPrivateMessage:1
msgid "Exception raised when an operation does not work in private message contexts."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckFailure:1
msgid "Exception raised when the predicates in :attr:`.Command.checks` have failed."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckFailure:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.DisabledCommand:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandInvokeError:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:3
msgid "This inherits from :exc:`CommandError`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:1
msgid "Exception raised when all predicates in :func:`check_any` fail."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NSFWChannelRequired:3
msgid "This inherits from :exc:`CheckFailure`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:9
msgid "A list of errors that were caught during execution."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:11
msgid "List[:class:`CheckFailure`]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:15
msgid "A list of check predicates that failed."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CheckAnyFailure:17
msgid "List[Callable[[:class:`Context`], :class:`bool`]]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandNotFound:1
msgid "Exception raised when a command is attempted to be invoked but no command under that name is found."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandNotFound:4
msgid "This is not raised for invalid subcommands, rather just the initial main command that is attempted to be invoked."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.DisabledCommand:1
msgid "Exception raised when the command being invoked is disabled."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandInvokeError:1
msgid "Exception raised when the command being invoked raised an exception."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyArguments:1
msgid "Exception raised when the command was passed too many arguments and its :attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserInputError:1
msgid "The base exception type for errors that involve errors regarding user input."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:1
msgid "Exception raised when the command being invoked is on cooldown."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:7
msgid "A class with attributes ``rate`` and ``per`` similar to the :func:`.cooldown` decorator."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:10
msgid ":class:`.Cooldown`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:14
msgid "The type associated with the cooldown."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:16
msgid ":class:`BucketType`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandOnCooldown:20
msgid "The amount of seconds to wait before you can retry again."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:1
msgid "Exception raised when the command being invoked has reached its maximum concurrency."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:7
msgid "The maximum number of concurrent invokers allowed."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:13
msgid "The bucket type passed to the :func:`.max_concurrency` decorator."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MaxConcurrencyReached:15
msgid ":class:`.BucketType`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NotOwner:1
msgid "Exception raised when the message author is not the owner of the bot."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MessageNotFound:1
msgid "Exception raised when the message provided was not found in the channel."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MessageNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MemberNotFound:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserNotFound:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotReadable:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ThreadNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadColourArgument:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.RoleNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadInviteArgument:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.EmojiNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PartialEmojiConversionFailure:4
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildStickerNotFound:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadBoolArgument:3
msgid "This inherits from :exc:`BadArgument`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MessageNotFound:9
msgid "The message supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MemberNotFound:1
msgid "Exception raised when the member provided was not found in the bot's cache."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MemberNotFound:10
msgid "The member supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildNotFound:1
msgid "Exception raised when the guild provided was not found in the bot's cache."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildNotFound:9
msgid "The guild supplied by the called that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserNotFound:1
msgid "Exception raised when the user provided was not found in the bot's cache."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.UserNotFound:10
msgid "The user supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotFound:1
msgid "Exception raised when the bot can not find the channel."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotFound:9
msgid "The channel supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotReadable:1
msgid "Exception raised when the bot does not have permission to read messages in the channel."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotReadable:10
msgid "The channel supplied by the caller that was not readable"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ChannelNotReadable:12
msgid "Union[:class:`.abc.GuildChannel`, :class:`.Thread`]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ThreadNotFound:1
msgid "Exception raised when the bot can not find the thread."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ThreadNotFound:9
msgid "The thread supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadColourArgument:1
msgid "Exception raised when the colour is not valid."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadColourArgument:9
msgid "The colour supplied by the caller that was not valid"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.RoleNotFound:1
msgid "Exception raised when the bot can not find the role."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.RoleNotFound:9
msgid "The role supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadInviteArgument:1
msgid "Exception raised when the invite is invalid or expired."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.EmojiNotFound:1
msgid "Exception raised when the bot can not find the emoji."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.EmojiNotFound:9
msgid "The emoji supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PartialEmojiConversionFailure:1
msgid "Exception raised when the emoji provided does not match the correct format."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.PartialEmojiConversionFailure:10
msgid "The emoji supplied by the caller that did not match the regex"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildStickerNotFound:1
msgid "Exception raised when the bot can not find the sticker."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.GuildStickerNotFound:9
msgid "The sticker supplied by the caller that was not found"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadBoolArgument:1
msgid "Exception raised when a boolean argument was not convertable."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadBoolArgument:9
msgid "The boolean argument supplied by the caller that is not in the predefined list"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingPermissions:1
msgid "Exception raised when the command invoker lacks permissions to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingPermissions:8
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingPermissions:8
msgid "The required permissions that are missing."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingPermissions:1
msgid "Exception raised when the bot's member lacks permissions to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRole:1
msgid "Exception raised when the command invoker lacks a role to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRole:9
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingRole:9
msgid "The required role that is missing. This is the parameter passed to :func:`~.commands.has_role`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRole:12
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingRole:12
msgid "Union[:class:`str`, :class:`int`]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingRole:1
msgid "Exception raised when the bot's member lacks a role to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingAnyRole:1
msgid "Exception raised when the command invoker lacks any of the roles specified to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingAnyRole:10
msgid "The roles that the invoker is missing. These are the parameters passed to :func:`~.commands.has_any_role`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingAnyRole:13
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingAnyRole:13
msgid "List[Union[:class:`str`, :class:`int`]]"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingAnyRole:1
msgid "Exception raised when the bot's member lacks any of the roles specified to run a command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BotMissingAnyRole:10
msgid "The roles that the bot's member is missing. These are the parameters passed to :func:`~.commands.has_any_role`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NSFWChannelRequired:1
msgid "Exception raised when a channel does not have the required NSFW setting."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NSFWChannelRequired:7
msgid "The channel that does not have NSFW enabled."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.FlagError:1
msgid "The base exception type for all flag parsing related errors."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.FlagError:3
msgid "This inherits from :exc:`BadArgument`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadFlagArgument:1
msgid "An exception raised when a flag failed to convert a value."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadFlagArgument:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingFlagArgument:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredFlag:3
msgid "This inherits from :exc:`FlagError`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadFlagArgument:9
msgid "The flag that failed to convert."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.BadFlagArgument:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingFlagArgument:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:11
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredFlag:11
msgid ":class:`~discord.ext.commands.Flag`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingFlagArgument:1
msgid "An exception raised when a flag did not get a value."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingFlagArgument:9
msgid "The flag that did not get a value."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:1
msgid "An exception raised when a flag has received too many values."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:3
msgid "This inherits from :exc:`FlagError`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:9
msgid "The flag that received too many values."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.TooManyFlags:15
msgid "The values that were passed."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredFlag:1
msgid "An exception raised when a required flag was not given."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.MissingRequiredFlag:9
msgid "The required flag that was not found."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionError:1
msgid "Base exception for extension related errors."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionError:3
msgid "This inherits from :exc:`~discord.DiscordException`."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionError:7
msgid "The extension that had an error."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionAlreadyLoaded:1
msgid "An exception raised when an extension has already been loaded."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionAlreadyLoaded:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotLoaded:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NoEntryPointError:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:3
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:3
msgid "This inherits from :exc:`ExtensionError`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotLoaded:1
msgid "An exception raised when an extension was not loaded."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.NoEntryPointError:1
msgid "An exception raised when an extension does not have a ``setup`` entry point function."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:1
msgid "An exception raised when an extension failed to load during execution of the module or ``setup`` entry point."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionFailed:7
#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:10
msgid "The extension that had the error."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:1
msgid "An exception raised when an extension is not found."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.ExtensionNotFound:5
msgid "Made the ``original`` attribute always None."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:1
msgid "An exception raised when the command can't be added because the name is already taken by a different command."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:4
msgid "This inherits from :exc:`discord.ClientException`"
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:10
msgid "The command name that had the error."
msgstr ""

#: ../../../discord/ext/commands/errors.py:docstring of discord.ext.commands.errors.CommandRegistrationError:16
msgid "Whether the name that conflicts is an alias of the command we try to add."
msgstr ""

#: ../../ext/commands/api.rst:627
msgid "Exception Hierarchy"
msgstr ""

#: ../../ext/commands/api.rst:684
msgid ":exc:`~.DiscordException`"
msgstr ""

#: ../../ext/commands/api.rst:678
msgid ":exc:`~.commands.CommandError`"
msgstr ""

#: ../../ext/commands/api.rst:633
msgid ":exc:`~.commands.ConversionError`"
msgstr ""

#: ../../ext/commands/api.rst:661
msgid ":exc:`~.commands.UserInputError`"
msgstr ""

#: ../../ext/commands/api.rst:635
msgid ":exc:`~.commands.MissingRequiredArgument`"
msgstr ""

#: ../../ext/commands/api.rst:636
msgid ":exc:`~.commands.TooManyArguments`"
msgstr ""

#: ../../ext/commands/api.rst:655
msgid ":exc:`~.commands.BadArgument`"
msgstr ""

#: ../../ext/commands/api.rst:638
msgid ":exc:`~.commands.MessageNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:639
msgid ":exc:`~.commands.MemberNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:640
msgid ":exc:`~.commands.GuildNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:641
msgid ":exc:`~.commands.UserNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:642
msgid ":exc:`~.commands.ChannelNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:643
msgid ":exc:`~.commands.ChannelNotReadable`"
msgstr ""

#: ../../ext/commands/api.rst:644
msgid ":exc:`~.commands.BadColourArgument`"
msgstr ""

#: ../../ext/commands/api.rst:645
msgid ":exc:`~.commands.RoleNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:646
msgid ":exc:`~.commands.BadInviteArgument`"
msgstr ""

#: ../../ext/commands/api.rst:647
msgid ":exc:`~.commands.EmojiNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:648
msgid ":exc:`~.commands.GuildStickerNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:649
msgid ":exc:`~.commands.PartialEmojiConversionFailure`"
msgstr ""

#: ../../ext/commands/api.rst:650
msgid ":exc:`~.commands.BadBoolArgument`"
msgstr ""

#: ../../ext/commands/api.rst:651
msgid ":exc:`~.commands.ThreadNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:655
msgid ":exc:`~.commands.FlagError`"
msgstr ""

#: ../../ext/commands/api.rst:653
msgid ":exc:`~.commands.BadFlagArgument`"
msgstr ""

#: ../../ext/commands/api.rst:654
msgid ":exc:`~.commands.MissingFlagArgument`"
msgstr ""

#: ../../ext/commands/api.rst:655
msgid ":exc:`~.commands.TooManyFlags`"
msgstr ""

#: ../../ext/commands/api.rst:656
msgid ":exc:`~.commands.MissingRequiredFlag`"
msgstr ""

#: ../../ext/commands/api.rst:657
msgid ":exc:`~.commands.BadUnionArgument`"
msgstr ""

#: ../../ext/commands/api.rst:658
msgid ":exc:`~.commands.BadLiteralArgument`"
msgstr ""

#: ../../ext/commands/api.rst:661
msgid ":exc:`~.commands.ArgumentParsingError`"
msgstr ""

#: ../../ext/commands/api.rst:660
msgid ":exc:`~.commands.UnexpectedQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:661
msgid ":exc:`~.commands.InvalidEndOfQuotedStringError`"
msgstr ""

#: ../../ext/commands/api.rst:662
msgid ":exc:`~.commands.ExpectedClosingQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:663
msgid ":exc:`~.commands.CommandNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:674
msgid ":exc:`~.commands.CheckFailure`"
msgstr ""

#: ../../ext/commands/api.rst:665
msgid ":exc:`~.commands.CheckAnyFailure`"
msgstr ""

#: ../../ext/commands/api.rst:666
msgid ":exc:`~.commands.PrivateMessageOnly`"
msgstr ""

#: ../../ext/commands/api.rst:667
msgid ":exc:`~.commands.NoPrivateMessage`"
msgstr ""

#: ../../ext/commands/api.rst:668
msgid ":exc:`~.commands.NotOwner`"
msgstr ""

#: ../../ext/commands/api.rst:669
msgid ":exc:`~.commands.MissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:670
msgid ":exc:`~.commands.BotMissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:671
msgid ":exc:`~.commands.MissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:672
msgid ":exc:`~.commands.BotMissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:673
msgid ":exc:`~.commands.MissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:674
msgid ":exc:`~.commands.BotMissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:675
msgid ":exc:`~.commands.NSFWChannelRequired`"
msgstr ""

#: ../../ext/commands/api.rst:676
msgid ":exc:`~.commands.DisabledCommand`"
msgstr ""

#: ../../ext/commands/api.rst:677
msgid ":exc:`~.commands.CommandInvokeError`"
msgstr ""

#: ../../ext/commands/api.rst:678
msgid ":exc:`~.commands.CommandOnCooldown`"
msgstr ""

#: ../../ext/commands/api.rst:679
msgid ":exc:`~.commands.MaxConcurrencyReached`"
msgstr ""

#: ../../ext/commands/api.rst:684
msgid ":exc:`~.commands.ExtensionError`"
msgstr ""

#: ../../ext/commands/api.rst:681
msgid ":exc:`~.commands.ExtensionAlreadyLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:682
msgid ":exc:`~.commands.ExtensionNotLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:683
msgid ":exc:`~.commands.NoEntryPointError`"
msgstr ""

#: ../../ext/commands/api.rst:684
msgid ":exc:`~.commands.ExtensionFailed`"
msgstr ""

#: ../../ext/commands/api.rst:685
msgid ":exc:`~.commands.ExtensionNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:686
msgid ":exc:`~.ClientException`"
msgstr ""

#: ../../ext/commands/api.rst:687
msgid ":exc:`~.commands.CommandRegistrationError`"
msgstr ""

