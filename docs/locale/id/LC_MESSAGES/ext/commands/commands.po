msgid ""
msgstr ""
"Project-Id-Version: ndiscordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-20 09:34+0800\n"
"PO-Revision-Date: 2021-09-20 02:49\n"
"Last-Translator: \n"
"Language-Team: Indonesian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: ndiscordpy\n"
"X-Crowdin-Project-ID: 476871\n"
"X-Crowdin-Language: id\n"
"X-Crowdin-File: /docs/_build/locale/ext/commands/commands.pot\n"
"X-Crowdin-File-ID: 51\n"
"Language: id_ID\n"

#: ../../ext/commands/commands.rst:6
msgid "Commands"
msgstr ""

#: ../../ext/commands/commands.rst:8
msgid "One of the most appealing aspects of the command extension is how easy it is to define commands and how you can arbitrarily nest groups and commands to have a rich sub-command system."
msgstr ""

#: ../../ext/commands/commands.rst:11
msgid "Commands are defined by attaching it to a regular Python function. The command is then invoked by the user using a similar signature to the Python function."
msgstr ""

#: ../../ext/commands/commands.rst:14
msgid "For example, in the given command definition:"
msgstr ""

#: ../../ext/commands/commands.rst:22
msgid "With the following prefix (``$``), it would be invoked by the user via:"
msgstr ""

#: ../../ext/commands/commands.rst:28
msgid "A command must always have at least one parameter, ``ctx``, which is the :class:`.Context` as the first one."
msgstr ""

#: ../../ext/commands/commands.rst:30
msgid "There are two ways of registering a command. The first one is by using :meth:`.Bot.command` decorator, as seen in the example above. The second is using the :func:`~ext.commands.command` decorator followed by :meth:`.Bot.add_command` on the instance."
msgstr ""

#: ../../ext/commands/commands.rst:34
msgid "Essentially, these two are equivalent: ::"
msgstr ""

#: ../../ext/commands/commands.rst:52
msgid "Since the :meth:`.Bot.command` decorator is shorter and easier to comprehend, it will be the one used throughout the documentation here."
msgstr ""

#: ../../ext/commands/commands.rst:55
msgid "Any parameter that is accepted by the :class:`.Command` constructor can be passed into the decorator. For example, to change the name to something other than the function would be as simple as doing this:"
msgstr ""

#: ../../ext/commands/commands.rst:65
msgid "Parameters"
msgstr ""

#: ../../ext/commands/commands.rst:67
msgid "Since we define commands by making Python functions, we also define the argument passing behaviour by the function parameters."
msgstr ""

#: ../../ext/commands/commands.rst:70
msgid "Certain parameter types do different things in the user side and most forms of parameter types are supported."
msgstr ""

#: ../../ext/commands/commands.rst:73
msgid "Positional"
msgstr ""

#: ../../ext/commands/commands.rst:75
msgid "The most basic form of parameter passing is the positional parameter. This is where we pass a parameter as-is:"
msgstr ""

#: ../../ext/commands/commands.rst:84
msgid "On the bot using side, you can provide positional arguments by just passing a regular string:"
msgstr ""

#: ../../ext/commands/commands.rst:88
msgid "To make use of a word with spaces in between, you should quote it:"
msgstr ""

#: ../../ext/commands/commands.rst:92
msgid "As a note of warning, if you omit the quotes, you will only get the first word:"
msgstr ""

#: ../../ext/commands/commands.rst:96
msgid "Since positional arguments are just regular Python arguments, you can have as many as you want:"
msgstr ""

#: ../../ext/commands/commands.rst:105
msgid "Variable"
msgstr ""

#: ../../ext/commands/commands.rst:107
msgid "Sometimes you want users to pass in an undetermined number of parameters. The library supports this similar to how variable list parameters are done in Python:"
msgstr ""

#: ../../ext/commands/commands.rst:117
msgid "This allows our user to accept either one or many arguments as they please. This works similar to positional arguments, so multi-word parameters should be quoted."
msgstr ""

#: ../../ext/commands/commands.rst:120
msgid "For example, on the bot side:"
msgstr ""

#: ../../ext/commands/commands.rst:124
msgid "If the user wants to input a multi-word argument, they have to quote it like earlier:"
msgstr ""

#: ../../ext/commands/commands.rst:128
msgid "Do note that similar to the Python function behaviour, a user can technically pass no arguments at all:"
msgstr ""

#: ../../ext/commands/commands.rst:133
msgid "Since the ``args`` variable is a :class:`py:tuple`, you can do anything you would usually do with one."
msgstr ""

#: ../../ext/commands/commands.rst:137
msgid "Keyword-Only Arguments"
msgstr ""

#: ../../ext/commands/commands.rst:139
msgid "When you want to handle parsing of the argument yourself or do not feel like you want to wrap multi-word user input into quotes, you can ask the library to give you the rest as a single argument. We do this by using a **keyword-only argument**, seen below:"
msgstr ""

#: ../../ext/commands/commands.rst:151
msgid "You can only have one keyword-only argument due to parsing ambiguities."
msgstr ""

#: ../../ext/commands/commands.rst:153
msgid "On the bot side, we do not need to quote input with spaces:"
msgstr ""

#: ../../ext/commands/commands.rst:157
msgid "Do keep in mind that wrapping it in quotes leaves it as-is:"
msgstr ""

#: ../../ext/commands/commands.rst:161
msgid "By default, the keyword-only arguments are stripped of white space to make it easier to work with. This behaviour can be toggled by the :attr:`.Command.rest_is_raw` argument in the decorator."
msgstr ""

#: ../../ext/commands/commands.rst:167
msgid "Invocation Context"
msgstr ""

#: ../../ext/commands/commands.rst:169
msgid "As seen earlier, every command must take at least a single parameter, called the :class:`~ext.commands.Context`."
msgstr ""

#: ../../ext/commands/commands.rst:171
msgid "This parameter gives you access to something called the \"invocation context\". Essentially all the information you need to know how the command was executed. It contains a lot of useful information:"
msgstr ""

#: ../../ext/commands/commands.rst:174
msgid ":attr:`.Context.guild` to fetch the :class:`Guild` of the command, if any."
msgstr ""

#: ../../ext/commands/commands.rst:175
msgid ":attr:`.Context.message` to fetch the :class:`Message` of the command."
msgstr ""

#: ../../ext/commands/commands.rst:176
msgid ":attr:`.Context.author` to fetch the :class:`Member` or :class:`User` that called the command."
msgstr ""

#: ../../ext/commands/commands.rst:177
msgid ":meth:`.Context.send` to send a message to the channel the command was used in."
msgstr ""

#: ../../ext/commands/commands.rst:179
msgid "The context implements the :class:`abc.Messageable` interface, so anything you can do on a :class:`abc.Messageable` you can do on the :class:`~ext.commands.Context`."
msgstr ""

#: ../../ext/commands/commands.rst:183
msgid "Converters"
msgstr ""

#: ../../ext/commands/commands.rst:185
msgid "Adding bot arguments with function parameters is only the first step in defining your bot's command interface. To actually make use of the arguments, we usually want to convert the data into a target type. We call these :ref:`ext_commands_api_converters`."
msgstr ""

#: ../../ext/commands/commands.rst:189
msgid "Converters come in a few flavours:"
msgstr ""

#: ../../ext/commands/commands.rst:191
msgid "A regular callable object that takes an argument as a sole parameter and returns a different type."
msgstr ""

#: ../../ext/commands/commands.rst:193
msgid "These range from your own function, to something like :class:`bool` or :class:`int`."
msgstr ""

#: ../../ext/commands/commands.rst:195
msgid "A custom class that inherits from :class:`~ext.commands.Converter`."
msgstr ""

#: ../../ext/commands/commands.rst:200
msgid "Basic Converters"
msgstr ""

#: ../../ext/commands/commands.rst:202
msgid "At its core, a basic converter is a callable that takes in an argument and turns it into something else."
msgstr ""

#: ../../ext/commands/commands.rst:204
msgid "For example, if we wanted to add two numbers together, we could request that they are turned into integers for us by specifying the converter:"
msgstr ""

#: ../../ext/commands/commands.rst:213
msgid "We specify converters by using something called a **function annotation**. This is a Python 3 exclusive feature that was introduced in :pep:`3107`."
msgstr ""

#: ../../ext/commands/commands.rst:216
msgid "This works with any callable, such as a function that would convert a string to all upper-case:"
msgstr ""

#: ../../ext/commands/commands.rst:228
msgid "bool"
msgstr ""

#: ../../ext/commands/commands.rst:230
msgid "Unlike the other basic converters, the :class:`bool` converter is treated slightly different. Instead of casting directly to the :class:`bool` type, which would result in any non-empty argument returning ``True``, it instead evaluates the argument as ``True`` or ``False`` based on its given content:"
msgstr ""

#: ../../ext/commands/commands.rst:242
msgid "Advanced Converters"
msgstr ""

#: ../../ext/commands/commands.rst:244
msgid "Sometimes a basic converter doesn't have enough information that we need. For example, sometimes we want to get some information from the :class:`Message` that called the command or we want to do some asynchronous processing."
msgstr ""

#: ../../ext/commands/commands.rst:247
msgid "For this, the library provides the :class:`~ext.commands.Converter` interface. This allows you to have access to the :class:`.Context` and have the callable be asynchronous. Defining a custom converter using this interface requires overriding a single method, :meth:`.Converter.convert`."
msgstr ""

#: ../../ext/commands/commands.rst:251
msgid "An example converter:"
msgstr ""

#: ../../ext/commands/commands.rst:266
msgid "The converter provided can either be constructed or not. Essentially these two are equivalent:"
msgstr ""

#: ../../ext/commands/commands.rst:280
msgid "Having the possibility of the converter be constructed allows you to set up some state in the converter's ``__init__`` for fine tuning the converter. An example of this is actually in the library, :class:`~ext.commands.clean_content`."
msgstr ""

#: ../../ext/commands/commands.rst:296
msgid "If a converter fails to convert an argument to its designated target type, the :exc:`.BadArgument` exception must be raised."
msgstr ""

#: ../../ext/commands/commands.rst:300
msgid "Inline Advanced Converters"
msgstr ""

#: ../../ext/commands/commands.rst:302
msgid "If we don't want to inherit from :class:`~ext.commands.Converter`, we can still provide a converter that has the advanced functionalities of an advanced converter and save us from specifying two types."
msgstr ""

#: ../../ext/commands/commands.rst:305
msgid "For example, a common idiom would be to have a class and a converter for that class:"
msgstr ""

#: ../../ext/commands/commands.rst:331
msgid "This can get tedious, so an inline advanced converter is possible through a :func:`classmethod` inside the type:"
msgstr ""

#: ../../ext/commands/commands.rst:358
msgid "Discord Converters"
msgstr ""

#: ../../ext/commands/commands.rst:360
msgid "Working with :ref:`discord_api_models` is a fairly common thing when defining commands, as a result the library makes working with them easy."
msgstr ""

#: ../../ext/commands/commands.rst:363
msgid "For example, to receive a :class:`Member` you can just pass it as a converter:"
msgstr ""

#: ../../ext/commands/commands.rst:371
msgid "When this command is executed, it attempts to convert the string given into a :class:`Member` and then passes it as a parameter for the function. This works by checking if the string is a mention, an ID, a nickname, a username + discriminator, or just a regular username. The default set of converters have been written to be as easy to use as possible."
msgstr ""

#: ../../ext/commands/commands.rst:375
msgid "A lot of discord models work out of the gate as a parameter:"
msgstr ""

#: ../../ext/commands/commands.rst:377
msgid ":class:`Object` (since v2.0)"
msgstr ""

#: ../../ext/commands/commands.rst:378
#: ../../ext/commands/commands.rst:408
msgid ":class:`Member`"
msgstr ""

#: ../../ext/commands/commands.rst:379
#: ../../ext/commands/commands.rst:410
msgid ":class:`User`"
msgstr ""

#: ../../ext/commands/commands.rst:380
msgid ":class:`Message` (since v1.1)"
msgstr ""

#: ../../ext/commands/commands.rst:381
msgid ":class:`PartialMessage` (since v1.7)"
msgstr ""

#: ../../ext/commands/commands.rst:382
msgid ":class:`abc.GuildChannel` (since 2.0)"
msgstr ""

#: ../../ext/commands/commands.rst:383
#: ../../ext/commands/commands.rst:418
msgid ":class:`TextChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:384
#: ../../ext/commands/commands.rst:420
msgid ":class:`VoiceChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:385
msgid ":class:`StageChannel` (since v1.7)"
msgstr ""

#: ../../ext/commands/commands.rst:386
msgid ":class:`StoreChannel` (since v1.7)"
msgstr ""

#: ../../ext/commands/commands.rst:387
#: ../../ext/commands/commands.rst:426
msgid ":class:`CategoryChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:388
#: ../../ext/commands/commands.rst:428
msgid ":class:`Invite`"
msgstr ""

#: ../../ext/commands/commands.rst:389
msgid ":class:`Guild` (since v1.7)"
msgstr ""

#: ../../ext/commands/commands.rst:390
#: ../../ext/commands/commands.rst:432
msgid ":class:`Role`"
msgstr ""

#: ../../ext/commands/commands.rst:391
#: ../../ext/commands/commands.rst:434
msgid ":class:`Game`"
msgstr ""

#: ../../ext/commands/commands.rst:392
#: ../../ext/commands/commands.rst:436
msgid ":class:`Colour`"
msgstr ""

#: ../../ext/commands/commands.rst:393
#: ../../ext/commands/commands.rst:438
msgid ":class:`Emoji`"
msgstr ""

#: ../../ext/commands/commands.rst:394
#: ../../ext/commands/commands.rst:440
msgid ":class:`PartialEmoji`"
msgstr ""

#: ../../ext/commands/commands.rst:395
msgid ":class:`Thread` (since v2.0)"
msgstr ""

#: ../../ext/commands/commands.rst:397
msgid "Having any of these set as the converter will intelligently convert the argument to the appropriate target type you specify."
msgstr ""

#: ../../ext/commands/commands.rst:400
msgid "Under the hood, these are implemented by the :ref:`ext_commands_adv_converters` interface. A table of the equivalent converter is given below:"
msgstr ""

#: ../../ext/commands/commands.rst:404
msgid "Discord Class"
msgstr ""

#: ../../ext/commands/commands.rst:404
msgid "Converter"
msgstr ""

#: ../../ext/commands/commands.rst:406
msgid ":class:`Object`"
msgstr ""

#: ../../ext/commands/commands.rst:406
msgid ":class:`~ext.commands.ObjectConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:408
msgid ":class:`~ext.commands.MemberConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:410
msgid ":class:`~ext.commands.UserConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:412
msgid ":class:`Message`"
msgstr ""

#: ../../ext/commands/commands.rst:412
msgid ":class:`~ext.commands.MessageConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:414
msgid ":class:`PartialMessage`"
msgstr ""

#: ../../ext/commands/commands.rst:414
msgid ":class:`~ext.commands.PartialMessageConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:416
msgid ":class:`.GuildChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:416
msgid ":class:`~ext.commands.GuildChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:418
msgid ":class:`~ext.commands.TextChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:420
msgid ":class:`~ext.commands.VoiceChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:422
msgid ":class:`StageChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:422
msgid ":class:`~ext.commands.StageChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:424
msgid ":class:`StoreChannel`"
msgstr ""

#: ../../ext/commands/commands.rst:424
msgid ":class:`~ext.commands.StoreChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:426
msgid ":class:`~ext.commands.CategoryChannelConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:428
msgid ":class:`~ext.commands.InviteConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:430
msgid ":class:`Guild`"
msgstr ""

#: ../../ext/commands/commands.rst:430
msgid ":class:`~ext.commands.GuildConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:432
msgid ":class:`~ext.commands.RoleConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:434
msgid ":class:`~ext.commands.GameConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:436
msgid ":class:`~ext.commands.ColourConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:438
msgid ":class:`~ext.commands.EmojiConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:440
msgid ":class:`~ext.commands.PartialEmojiConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:442
msgid ":class:`Thread`"
msgstr ""

#: ../../ext/commands/commands.rst:442
msgid ":class:`~ext.commands.ThreadConverter`"
msgstr ""

#: ../../ext/commands/commands.rst:445
msgid "By providing the converter it allows us to use them as building blocks for another converter:"
msgstr ""

#: ../../ext/commands/commands.rst:462
msgid "Special Converters"
msgstr ""

#: ../../ext/commands/commands.rst:464
msgid "The command extension also has support for certain converters to allow for more advanced and intricate use cases that go beyond the generic linear parsing. These converters allow you to introduce some more relaxed and dynamic grammar to your commands in an easy to use manner."
msgstr ""

#: ../../ext/commands/commands.rst:469
msgid "typing.Union"
msgstr ""

#: ../../ext/commands/commands.rst:471
msgid "A :data:`typing.Union` is a special type hint that allows for the command to take in any of the specific types instead of a singular type. For example, given the following:"
msgstr ""

#: ../../ext/commands/commands.rst:483
msgid "The ``what`` parameter would either take a :class:`discord.TextChannel` converter or a :class:`discord.Member` converter. The way this works is through a left-to-right order. It first attempts to convert the input to a :class:`discord.TextChannel`, and if it fails it tries to convert it to a :class:`discord.Member`. If all converters fail, then a special error is raised, :exc:`~ext.commands.BadUnionArgument`."
msgstr ""

#: ../../ext/commands/commands.rst:488
msgid "Note that any valid converter discussed above can be passed in to the argument list of a :data:`typing.Union`."
msgstr ""

#: ../../ext/commands/commands.rst:491
msgid "typing.Optional"
msgstr ""

#: ../../ext/commands/commands.rst:493
msgid "A :data:`typing.Optional` is a special type hint that allows for \"back-referencing\" behaviour. If the converter fails to parse into the specified type, the parser will skip the parameter and then either ``None`` or the specified default will be passed into the parameter instead. The parser will then continue on to the next parameters and converters, if any."
msgstr ""

#: ../../ext/commands/commands.rst:497
#: ../../ext/commands/commands.rst:545
msgid "Consider the following example:"
msgstr ""

#: ../../ext/commands/commands.rst:510
msgid "In this example, since the argument could not be converted into an ``int``, the default of ``99`` is passed and the parser resumes handling, which in this case would be to pass it into the ``liquid`` parameter."
msgstr ""

#: ../../ext/commands/commands.rst:515
msgid "This converter only works in regular positional parameters, not variable parameters or keyword-only parameters."
msgstr ""

#: ../../ext/commands/commands.rst:518
msgid "typing.Literal"
msgstr ""

#: ../../ext/commands/commands.rst:520
msgid "A :data:`typing.Literal` is a special type hint that requires the passed parameter to be equal to one of the listed values after being converted to the same type. For example, given the following:"
msgstr ""

#: ../../ext/commands/commands.rst:532
msgid "The ``buy_sell`` parameter must be either the literal string ``\"buy\"`` or ``\"sell\"`` and ``amount`` must convert to the ``int`` ``1`` or ``2``. If ``buy_sell`` or ``amount`` don't match any value, then a special error is raised, :exc:`~.ext.commands.BadLiteralArgument`. Any literal values can be mixed and matched within the same :data:`typing.Literal` converter."
msgstr ""

#: ../../ext/commands/commands.rst:536
msgid "Note that ``typing.Literal[True]`` and ``typing.Literal[False]`` still follow the :class:`bool` converter rules."
msgstr ""

#: ../../ext/commands/commands.rst:539
msgid "Greedy"
msgstr ""

#: ../../ext/commands/commands.rst:541
msgid "The :class:`~ext.commands.Greedy` converter is a generalisation of the :data:`typing.Optional` converter, except applied to a list of arguments. In simple terms, this means that it tries to convert as much as it can until it can't convert any further."
msgstr ""

#: ../../ext/commands/commands.rst:554
msgid "When invoked, it allows for any number of members to be passed in:"
msgstr ""

#: ../../ext/commands/commands.rst:558
msgid "The type passed when using this converter depends on the parameter type that it is being attached to:"
msgstr ""

#: ../../ext/commands/commands.rst:560
msgid "Positional parameter types will receive either the default parameter or a :class:`list` of the converted values."
msgstr ""

#: ../../ext/commands/commands.rst:561
msgid "Variable parameter types will be a :class:`tuple` as usual."
msgstr ""

#: ../../ext/commands/commands.rst:562
msgid "Keyword-only parameter types will be the same as if :class:`~ext.commands.Greedy` was not passed at all."
msgstr ""

#: ../../ext/commands/commands.rst:564
msgid ":class:`~ext.commands.Greedy` parameters can also be made optional by specifying an optional value."
msgstr ""

#: ../../ext/commands/commands.rst:566
msgid "When mixed with the :data:`typing.Optional` converter you can provide simple and expressive command invocation syntaxes:"
msgstr ""

#: ../../ext/commands/commands.rst:581
msgid "This command can be invoked any of the following ways:"
msgstr ""

#: ../../ext/commands/commands.rst:591
msgid "The usage of :class:`~ext.commands.Greedy` and :data:`typing.Optional` are powerful and useful, however as a price, they open you up to some parsing ambiguities that might surprise some people."
msgstr ""

#: ../../ext/commands/commands.rst:594
msgid "For example, a signature expecting a :data:`typing.Optional` of a :class:`discord.Member` followed by a :class:`int` could catch a member named after a number due to the different ways a :class:`~ext.commands.MemberConverter` decides to fetch members. You should take care to not introduce unintended parsing ambiguities in your code. One technique would be to clamp down the expected syntaxes allowed through custom converters or reordering the parameters to minimise clashes."
msgstr ""

#: ../../ext/commands/commands.rst:600
msgid "To help aid with some parsing ambiguities, :class:`str`, ``None``, :data:`typing.Optional` and :class:`~ext.commands.Greedy` are forbidden as parameters for the :class:`~ext.commands.Greedy` converter."
msgstr ""

#: ../../ext/commands/commands.rst:606
msgid "FlagConverter"
msgstr ""

#: ../../ext/commands/commands.rst:610
msgid "A :class:`~ext.commands.FlagConverter` allows the user to specify user-friendly \"flags\" using :pep:`526` type annotations or a syntax more reminiscent of the :mod:`py:dataclasses` module."
msgstr ""

#: ../../ext/commands/commands.rst:613
msgid "For example, the following code:"
msgstr ""

#: ../../ext/commands/commands.rst:630
msgid "Allows the user to invoke the command using a simple flag-like syntax:"
msgstr ""

#: ../../ext/commands/commands.rst:634
msgid "Flags use a syntax that allows the user to not require quotes when passing in values to the flag. The goal of the flag syntax is to be as user-friendly as possible. This makes flags a good choice for complicated commands that can have multiple knobs to turn or simulating keyword-only parameters in your external command interface. **It is recommended to use keyword-only parameters with the flag converter**. This ensures proper parsing and behaviour with quoting."
msgstr ""

#: ../../ext/commands/commands.rst:639
msgid "Internally, the :class:`~ext.commands.FlagConverter` class examines the class to find flags. A flag can either be a class variable with a type annotation or a class variable that's been assigned the result of the :func:`~ext.commands.flag` function. These flags are then used to define the interface that your users will use. The annotations correspond to the converters that the flag arguments must adhere to."
msgstr ""

#: ../../ext/commands/commands.rst:644
msgid "For most use cases, no extra work is required to define flags. However, if customisation is needed to control the flag name or the default value then the :func:`~ext.commands.flag` function can come in handy:"
msgstr ""

#: ../../ext/commands/commands.rst:654
msgid "This tells the parser that the ``members`` attribute is mapped to a flag named ``member`` and that the default value is an empty list. For greater customisability, the default can either be a value or a callable that takes the :class:`~ext.commands.Context` as a sole parameter. This callable can either be a function or a coroutine."
msgstr ""

#: ../../ext/commands/commands.rst:658
msgid "In order to customise the flag syntax we also have a few options that can be passed to the class parameter list:"
msgstr ""

#: ../../ext/commands/commands.rst:679
msgid "Despite the similarities in these examples to command like arguments, the syntax and parser is not a command line parser. The syntax is mainly inspired by Discord's search bar input and as a result all flags need a corresponding value."
msgstr ""

#: ../../ext/commands/commands.rst:683
msgid "The flag converter is similar to regular commands and allows you to use most types of converters (with the exception of :class:`~ext.commands.Greedy`) as the type annotation. Some extra support is added for specific annotations as described below."
msgstr ""

#: ../../ext/commands/commands.rst:688
msgid "typing.List"
msgstr ""

#: ../../ext/commands/commands.rst:690
msgid "If a list is given as a flag annotation it tells the parser that the argument can be passed multiple times."
msgstr ""

#: ../../ext/commands/commands.rst:692
msgid "For example, augmenting the example above:"
msgstr ""

#: ../../ext/commands/commands.rst:714
msgid "This is called by repeatedly specifying the flag:"
msgstr ""

#: ../../ext/commands/commands.rst:719
msgid "typing.Tuple"
msgstr ""

#: ../../ext/commands/commands.rst:721
msgid "Since the above syntax can be a bit repetitive when specifying a flag many times, the :class:`py:tuple` type annotation allows for \"greedy-like\" semantics using a variadic tuple:"
msgstr ""

#: ../../ext/commands/commands.rst:735
msgid "This allows the previous ``ban`` command to be called like this:"
msgstr ""

#: ../../ext/commands/commands.rst:739
msgid "The :class:`py:tuple` annotation also allows for parsing of pairs. For example, given the following code:"
msgstr ""

#: ../../ext/commands/commands.rst:750
msgid "Due to potential parsing ambiguities, the parser expects tuple arguments to be quoted if they require spaces. So if one of the inner types is :class:`str` and the argument requires spaces then quotes should be used to disambiguate it from the other element of the tuple."
msgstr ""

#: ../../ext/commands/commands.rst:755
msgid "typing.Dict"
msgstr ""

#: ../../ext/commands/commands.rst:757
msgid "A :class:`dict` annotation is functionally equivalent to ``List[Tuple[K, V]]`` except with the return type given as a :class:`dict` rather than a :class:`list`."
msgstr ""

#: ../../ext/commands/commands.rst:764
msgid "Error Handling"
msgstr ""

#: ../../ext/commands/commands.rst:766
msgid "When our commands fail to parse we will, by default, receive a noisy error in ``stderr`` of our console that tells us that an error has happened and has been silently ignored."
msgstr ""

#: ../../ext/commands/commands.rst:769
msgid "In order to handle our errors, we must use something called an error handler. There is a global error handler, called :func:`.on_command_error` which works like any other event in the :ref:`discord-api-events`. This global error handler is called for every error reached."
msgstr ""

#: ../../ext/commands/commands.rst:773
msgid "Most of the time however, we want to handle an error local to the command itself. Luckily, commands come with local error handlers that allow us to do just that. First we decorate an error handler function with :meth:`.Command.error`:"
msgstr ""

#: ../../ext/commands/commands.rst:789
msgid "The first parameter of the error handler is the :class:`.Context` while the second one is an exception that is derived from :exc:`~ext.commands.CommandError`. A list of errors is found in the :ref:`ext_commands_api_errors` page of the documentation."
msgstr ""

#: ../../ext/commands/commands.rst:793
msgid "Checks"
msgstr ""

#: ../../ext/commands/commands.rst:795
msgid "There are cases when we don't want a user to use our commands. They don't have permissions to do so or maybe we blocked them from using our bot earlier. The commands extension comes with full support for these things in a concept called a :ref:`ext_commands_api_checks`."
msgstr ""

#: ../../ext/commands/commands.rst:799
msgid "A check is a basic predicate that can take in a :class:`.Context` as its sole parameter. Within it, you have the following options:"
msgstr ""

#: ../../ext/commands/commands.rst:802
msgid "Return ``True`` to signal that the person can run the command."
msgstr ""

#: ../../ext/commands/commands.rst:803
msgid "Return ``False`` to signal that the person cannot run the command."
msgstr ""

#: ../../ext/commands/commands.rst:804
msgid "Raise a :exc:`~ext.commands.CommandError` derived exception to signal the person cannot run the command."
msgstr ""

#: ../../ext/commands/commands.rst:806
msgid "This allows you to have custom error messages for you to handle in the :ref:`error handlers <ext_commands_error_handler>`."
msgstr ""

#: ../../ext/commands/commands.rst:809
msgid "To register a check for a command, we would have two ways of doing so. The first is using the :meth:`~ext.commands.check` decorator. For example:"
msgstr ""

#: ../../ext/commands/commands.rst:823
msgid "This would only evaluate the command if the function ``is_owner`` returns ``True``. Sometimes we re-use a check often and want to split it into its own decorator. To do that we can just add another level of depth:"
msgstr ""

#: ../../ext/commands/commands.rst:840
msgid "Since an owner check is so common, the library provides it for you (:func:`~ext.commands.is_owner`):"
msgstr ""

#: ../../ext/commands/commands.rst:850
msgid "When multiple checks are specified, **all** of them must be ``True``:"
msgstr ""

#: ../../ext/commands/commands.rst:866
msgid "If any of those checks fail in the example above, then the command will not be run."
msgstr ""

#: ../../ext/commands/commands.rst:868
msgid "When an error happens, the error is propagated to the :ref:`error handlers <ext_commands_error_handler>`. If you do not raise a custom :exc:`~ext.commands.CommandError` derived exception, then it will get wrapped up into a :exc:`~ext.commands.CheckFailure` exception as so:"
msgstr ""

#: ../../ext/commands/commands.rst:886
msgid "If you want a more robust error system, you can derive from the exception and raise it instead of returning ``False``:"
msgstr ""

#: ../../ext/commands/commands.rst:911
msgid "Since having a ``guild_only`` decorator is pretty common, it comes built-in via :func:`~ext.commands.guild_only`."
msgstr ""

#: ../../ext/commands/commands.rst:914
msgid "Global Checks"
msgstr ""

#: ../../ext/commands/commands.rst:916
msgid "Sometimes we want to apply a check to **every** command, not just certain commands. The library supports this as well using the global check concept."
msgstr ""

#: ../../ext/commands/commands.rst:919
msgid "Global checks work similarly to regular checks except they are registered with the :meth:`.Bot.check` decorator."
msgstr ""

#: ../../ext/commands/commands.rst:921
msgid "For example, to block all DMs we could do the following:"
msgstr ""

#: ../../ext/commands/commands.rst:931
msgid "Be careful on how you write your global checks, as it could also lock you out of your own bot."
msgstr ""

